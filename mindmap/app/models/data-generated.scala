package models
object data {
val generated = List({
val x1 = Vertex("""THE MYTHICAL MAN-MONTH""", 0, 840, 330, 21)
val x2 = Vertex("""MYTHICAL MAN-MONTH AFTER 20 YEARS""", 350, 1624, 330, 42)
val x3 = Vertex("""PROPOSITIONS OF THE MYTHICAL MAN-MONTH: TRUE OR FALSE?""", 350, 1546, 330, 63)
val x4 = Vertex("""Summary""", 700, 1544, 105, 21)
val x5 = Vertex("""Of""", 825, 1540, 30, 21)
val x6 = Vertex("""Mythical Man-Month""", 875, 1531, 270, 21)
val x7 = Vertex("""Main Points""", 1165, 1513, 165, 21)
val x8 = Vertex("""NO SILVER BULLET REFIRED""", 350, 1456, 330, 42)
val x9 = Vertex("""Reactions""", 700, 1452, 135, 21)
val x10 = Vertex("""To""", 855, 1443, 30, 21)
val x11 = Vertex("""No Silver Bullet""", 905, 1425, 240, 21)
val x12 = Vertex("""NO SILVER BULLET - ESSENCE AND ACCIDENT""", 350, 1368, 330, 42)
val x13 = Vertex("""OTHER FACE""", 350, 1332, 150, 21)
val x14 = Vertex("""HATCHING A CATASTROPHE""", 350, 1296, 330, 21)
val x15 = Vertex("""WHOLE AND PARTS""", 350, 1260, 225, 21)
val x16 = Vertex("""SHARP TOOLS""", 350, 1224, 165, 21)
val x17 = Vertex("""PLAN TO THROW ONE AWAY""", 350, 1188, 330, 21)
val x18 = Vertex("""DOCUMENTARY HYPOTHESIS""", 350, 1152, 330, 21)
val x19 = Vertex("""TEN POUNDS IN A FIVE POUND SACK""", 350, 1095, 330, 42)
val x20 = Vertex("""CALLING THE SHOT""", 350, 826, 240, 21)
val x21 = Vertex("""Time Estimation""", 610, 826, 225, 21)
val x22 = Vertex("""Productivity""", 855, 978, 180, 21)
val x23 = Vertex("""Increased""", 1055, 1059, 135, 21)
val x24 = Vertex("""Using""", 1210, 1050, 75, 21)
val x25 = Vertex("""High-level Language""", 1305, 1032, 285, 21)
val x26 = Vertex("""Varies With""", 1055, 947, 165, 21)
val x27 = Vertex("""Complexity""", 1240, 947, 150, 21)
val x28 = Vertex("""Operating System""", 1410, 996, 240, 21)
val x29 = Vertex("""3 Times""", 1670, 992, 105, 21)
val x30 = Vertex("""Worse Than""", 1795, 983, 150, 21)
val x31 = Vertex("""Compiler""", 1965, 965, 120, 21)
val x32 = Vertex("""Compiler""", 1410, 929, 120, 21)
val x33 = Vertex("""3 Times""", 1550, 925, 105, 21)
val x34 = Vertex("""Worse Than""", 1675, 916, 150, 21)
val x35 = Vertex("""Application""", 1845, 898, 165, 21)
val x36 = Vertex("""Task""", 1410, 862, 60, 21)
val x37 = Vertex("""Effort""", 855, 826, 90, 21)
val x38 = Vertex("""Required""", 965, 825, 120, 21)
val x39 = Vertex("""Varies With""", 1105, 823, 165, 21)
val x40 = Vertex("""Number of Instructions""", 1290, 819, 330, 21)
val x41 = Vertex("""Raised To""", 1640, 810, 135, 21)
val x42 = Vertex("""1.5""", 1795, 792, 45, 21)
val x43 = Vertex("""Downtime""", 855, 675, 120, 21)
val x44 = Vertex("""EG""", 995, 702, 30, 21)
val x45 = Vertex("""Leave""", 1045, 756, 75, 21)
val x46 = Vertex("""Sickness""", 1045, 720, 120, 21)
val x47 = Vertex("""Unrelated Work""", 1045, 684, 210, 21)
val x48 = Vertex("""Paperwork""", 1045, 648, 135, 21)
val x49 = Vertex("""Meetings""", 1045, 612, 120, 21)
val x50 = Vertex("""50%""", 995, 576, 45, 21)
val x51 = Vertex("""Total""", 1060, 558, 75, 21)
val x52 = Vertex("""WHY DID TOWER OF BABEL FAIL?""", 350, 501, 330, 42)
val x53 = Vertex("""PASSING THE WORD""", 350, 465, 240, 21)
val x54 = Vertex("""SECOND SYSTEM EFFECT""", 350, 429, 300, 21)
val x55 = Vertex("""ARISTOCRACY, DEMOCRACY, SYSTEM DESIGN""", 350, 372, 330, 42)
val x56 = Vertex("""SURGICAL TEAM""", 350, 336, 195, 21)
val x57 = Vertex("""MYTHICAL MAN-MONTH""", 350, 300, 270, 21)
val x58 = Vertex("""TAR PIT""", 350, 264, 105, 21)
val x59 = Vertex("""SOURCE""", 350, 132, 90, 21)
val x60 = Vertex("""ISBN 0-201-83595-9""", 460, 228, 270, 21)
val x61 = Vertex("""1995""", 460, 192, 60, 21)
val x62 = Vertex("""Addison-Wesley""", 460, 156, 210, 21)
val x63 = Vertex("""Frederick P. Brooks, Jr""", 460, 99, 330, 42)
val x64 = Vertex("""The Mythical Man-Month: 
Essays on Software Engineering 
Anniversary Edition""", 460, 0, 330, 84)
MindMap("""THE MYTHICAL MAN-MONTH""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64), List(Edge(x1, x2), Edge(x1, x3), Edge(x1, x8), Edge(x1, x12), Edge(x1, x13), Edge(x1, x14), Edge(x1, x15), Edge(x1, x16), Edge(x1, x17), Edge(x1, x18), Edge(x1, x19), Edge(x1, x20), Edge(x1, x52), Edge(x1, x53), Edge(x1, x54), Edge(x1, x55), Edge(x1, x56), Edge(x1, x57), Edge(x1, x58), Edge(x1, x59), Edge(x3, x4), Edge(x4, x5), Edge(x5, x6), Edge(x6, x7), Edge(x8, x9), Edge(x9, x10), Edge(x10, x11), Edge(x20, x21), Edge(x21, x22), Edge(x21, x37), Edge(x21, x43), Edge(x22, x23), Edge(x22, x26), Edge(x23, x24), Edge(x24, x25), Edge(x26, x27), Edge(x27, x28), Edge(x27, x32), Edge(x27, x36), Edge(x28, x29), Edge(x29, x30), Edge(x30, x31), Edge(x32, x33), Edge(x33, x34), Edge(x34, x35), Edge(x37, x38), Edge(x38, x39), Edge(x39, x40), Edge(x40, x41), Edge(x41, x42), Edge(x43, x44), Edge(x43, x50), Edge(x44, x45), Edge(x44, x46), Edge(x44, x47), Edge(x44, x48), Edge(x44, x49), Edge(x50, x51), Edge(x59, x60), Edge(x59, x61), Edge(x59, x62), Edge(x59, x63), Edge(x59, x64)))
}
, {
val x1 = Vertex("""Software design patterns""", 0, 4279, 330, 42)
val x2 = Vertex("""Unlike components, does not provide reuse""", 350, 8502, 330, 42)
val x3 = Vertex("""resources""", 350, 8349, 135, 21)
val x4 = Vertex("""Design Class Diagrams""", 505, 8466, 315, 21)
val x5 = Vertex("""Design Patterns (exciton)""", 505, 8409, 330, 42)
val x6 = Vertex("""Design Patterns http://home.earthlink.net/~huston2/dp/patterns.html""", 505, 8310, 330, 84)
val x7 = Vertex("""go4expert.com > Forums > Showthread ? ...""", 505, 8253, 330, 42)
val x8 = Vertex("""http://en.wikipedia.org/wiki/Pattern_theory""", 505, 8196, 330, 42)
val x9 = Vertex("""tools""", 350, 8100, 75, 21)
val x10 = Vertex("""eclipse plug-ins""", 445, 8118, 240, 21)
val x11 = Vertex("""Design Pattern Toolkit""", 705, 8157, 330, 21)
val x12 = Vertex("""create patterns and generates applications from patterns""", 1055, 8118, 330, 63)
val x13 = Vertex("""pattern box""", 705, 8079, 165, 21)
val x14 = Vertex("""includes 16 design patterns of the Gang of Four (GoF).""", 890, 8040, 330, 63)
val x15 = Vertex("""argouml""", 445, 8004, 105, 21)
val x16 = Vertex("""Anti Patern""", 350, 7497, 165, 21)
val x17 = Vertex("""Over Use Of Patterns""", 535, 7789, 300, 21)
val x18 = Vertex("""The resulting code tends to be full of factories that only ever return a single thing, that thing being a proxy to a delegate that wraps a class that has a method that has the three lines of code you actually want to execute.""", 855, 7758, 330, 231)
val x19 = Vertex("""Developers, having seen the light regarding the usefulness of patterns, try to use them wherever they can, regardless of whether the pattern is appropriate.""", 855, 7575, 330, 168)
val x20 = Vertex("""Design For The Sake Of Design""", 535, 7518, 330, 42)
val x21 = Vertex("""Organizational """, 535, 7381, 225, 21)
val x22 = Vertex("""If It Is Working Dont Change""", 780, 7461, 330, 42)
val x23 = Vertex("""Give Me Estimates Now""", 780, 7371, 315, 21)
val x24 = Vertex("""estimate how much time and extra info is need to produce the desired estimate""", 1115, 7362, 330, 84)
val x25 = Vertex("""boss doesn't buy it. Lower accuracy is suggested instead. Funny thing is however inaccurate the estimate is said to be, it turns into a deadline.""", 1465, 7281, 330, 147)
val x26 = Vertex("""Untested But Finished""", 780, 7245, 315, 21)
val x27 = Vertex("""Spaghettiness""", 535, 7174, 195, 21)
val x28 = Vertex("""spaghetti code often is all code that is not our own because it was generated by minds that think differently than us.""", 750, 7104, 330, 126)
val x29 = Vertex("""Catalog""", 535, 7068, 105, 21)
val x30 = Vertex("""a pattern that tells how to go from a problem to a bad solution.""", 535, 6990, 330, 63)
val x31 = Vertex("""history""", 350, 6954, 105, 21)
val x32 = Vertex("""Design Patterns (GOF)""", 475, 6936, 315, 21)
val x33 = Vertex("""clasification on usage""", 350, 3468, 330, 21)
val x34 = Vertex("""Concurrency patterns""", 700, 6549, 300, 21)
val x35 = Vertex("""Leaders/followers pattern""", 1020, 6879, 330, 42)
val x36 = Vertex("""Guarded suspension""", 1020, 6843, 270, 21)
val x37 = Vertex("""Balking pattern""", 1020, 6807, 225, 21)
val x38 = Vertex("""IllegalStateException""", 1265, 6789, 315, 21)
val x39 = Vertex("""Active Object""", 1020, 6753, 195, 21)
val x40 = Vertex("""Reactor pattern""", 1020, 6717, 225, 21)
val x41 = Vertex("""Monitor (synchronization)""", 1020, 6660, 330, 42)
val x42 = Vertex("""Hoare vs. Mesa semantics""", 1370, 6660, 330, 42)
val x43 = Vertex("""lock.acquire(); lock.release();""", 1370, 6603, 330, 42)
val x44 = Vertex("""Thread-local storage""", 1020, 6564, 300, 21)
val x45 = Vertex("""ThreadLocal<Integer> local = new ThreadLocal<Integer>();""", 1340, 6525, 330, 63)
val x46 = Vertex("""Read/write lock pattern""", 1020, 6468, 330, 42)
val x47 = Vertex("""Double-checked locking""", 1020, 6333, 330, 21)
val x48 = Vertex("""It will work for 32-bit primitive values""", 1370, 6411, 330, 42)
val x49 = Vertex("""Just define the singleton as a static field in a separate class.""", 1370, 6333, 330, 63)
val x50 = Vertex("""The "Double-Checked Locking is Broken" Declaration""", 1370, 6255, 330, 63)
val x51 = Vertex("""will work with volatile in >= j2se5.0""", 1370, 6198, 330, 42)
val x52 = Vertex("""Thread pool pattern""", 1020, 6162, 285, 21)
val x53 = Vertex("""Behavioral Patterns""", 700, 4434, 285, 21)
val x54 = Vertex("""Mediator""", 1005, 6021, 120, 21)
val x55 = Vertex("""Analogy:  airport control tower""", 1145, 6105, 330, 42)
val x56 = Vertex("""Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.""", 1145, 5880, 330, 210)
val x57 = Vertex("""Template Method""", 1005, 5739, 225, 21)
val x58 = Vertex("""constant algorithm, replaceable steps""", 1250, 5823, 330, 42)
val x59 = Vertex("""Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.""", 1250, 5598, 330, 210)
val x60 = Vertex("""Visitor""", 1005, 5379, 105, 21)
val x61 = Vertex("""The Visitor Design Pattern""", 1130, 5541, 330, 42)
val x62 = Vertex("""ability to add new operations to existing object structures without modifying those structures""", 1130, 5421, 330, 105)
val x63 = Vertex("""decouple operations on an aggregate object""", 1130, 5364, 330, 42)
val x64 = Vertex("""Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.""", 1130, 5160, 330, 189)
val x65 = Vertex("""Interpreter""", 1005, 5050, 165, 21)
val x66 = Vertex("""Analogy: musician reading music""", 1190, 5103, 330, 42)
val x67 = Vertex("""Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.""", 1190, 4941, 330, 147)
val x68 = Vertex("""Iterator""", 1005, 4813, 120, 21)
val x69 = Vertex("""decouple traversal of an aggregate object""", 1145, 4884, 330, 42)
val x70 = Vertex("""Analogy: secr accessing her file system""", 1145, 4827, 330, 42)
val x71 = Vertex("""Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.""", 1145, 4686, 330, 126)
val x72 = Vertex("""Memento""", 1005, 4566, 105, 21)
val x73 = Vertex("""checkpoint/rollback an object's internal state""", 1130, 4608, 330, 63)
val x74 = Vertex("""Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.""", 1130, 4446, 330, 147)
val x75 = Vertex("""State""", 1005, 4308, 75, 21)
val x76 = Vertex("""State is more dynamic than strategy""", 1100, 4389, 330, 42)
val x77 = Vertex("""object's behavior morphs as its state changes""", 1100, 4311, 330, 63)
val x78 = Vertex("""Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.""", 1100, 4170, 330, 126)
val x79 = Vertex("""Observer""", 1005, 4042, 120, 21)
val x80 = Vertex("""Listener""", 1145, 4134, 120, 21)
val x81 = Vertex("""Analogy: news subsscription""", 1145, 4077, 330, 42)
val x82 = Vertex("""Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.""", 1145, 3915, 330, 147)
val x83 = Vertex("""Strategy""", 1005, 3706, 120, 21)
val x84 = Vertex("""Example - Routing Strategies: Static, Dinamic""", 1145, 3837, 330, 63)
val x85 = Vertex("""uses composition instead of inheritance.""", 1145, 3780, 330, 42)
val x86 = Vertex("""plug-compatible algorithms; 
algorithms can be selected on-the-fly at runtime;""", 1145, 3681, 330, 84)
val x87 = Vertex("""Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.""", 1145, 3498, 330, 168)
val x88 = Vertex("""Command""", 1005, 3253, 105, 21)
val x89 = Vertex("""Parallel Processing""", 1130, 3462, 285, 21)
val x90 = Vertex("""thread pool class works with an internal queue of tasks waiting to be done. Tasks are Command objects.""", 1130, 3342, 330, 105)
val x91 = Vertex("""uml""", 1130, 3306, 45, 21)
val x92 = Vertex("""encapsulate a request as an object""", 1130, 3249, 330, 42)
val x93 = Vertex("""Analogy: meal order at a restaurant""", 1130, 3192, 330, 42)
val x94 = Vertex("""Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.""", 1130, 3009, 330, 168)
val x95 = Vertex("""Chain of Responsibility""", 1005, 2857, 330, 42)
val x96 = Vertex("""single processing pipe, many possible handlers""", 1355, 2931, 330, 63)
val x97 = Vertex("""Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.""", 1355, 2706, 330, 210)
val x98 = Vertex("""Structural Patterns""", 700, 1963, 285, 21)
val x99 = Vertex("""Proxy """, 1005, 2656, 90, 21)
val x100 = Vertex("""Provide a surrogate or placeholder for another object to control access to it.""", 1115, 2607, 330, 84)
val x101 = Vertex("""Flyweight """, 1005, 2479, 150, 21)
val x102 = Vertex("""use hashmap (week) to cache, override equals, hashcode""", 1175, 2529, 330, 63)
val x103 = Vertex("""use sharing to optimize lots of "little" objects""", 1175, 2451, 330, 63)
val x104 = Vertex("""Use sharing to support large numbers of fine-grained objects efficiently.""", 1175, 2352, 330, 84)
val x105 = Vertex("""Facade """, 1005, 2242, 105, 21)
val x106 = Vertex("""simple front-end to a complicated subsystem""", 1130, 2295, 330, 42)
val x107 = Vertex("""Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.""", 1130, 2133, 330, 147)
val x108 = Vertex("""Decorator """, 1005, 2013, 150, 21)
val x109 = Vertex("""scrollbar is the "decoration" to the webpage""", 1175, 2076, 330, 42)
val x110 = Vertex("""Composite     Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. """, 1175, 1893, 330, 168)
val x111 = Vertex("""Composite""", 1005, 1755, 135, 21)
val x112 = Vertex("""Example: javax.management.CompositeData""", 1160, 1836, 330, 42)
val x113 = Vertex("""recursive composition""", 1160, 1800, 315, 21)
val x114 = Vertex("""Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.""", 1160, 1617, 330, 168)
val x115 = Vertex("""Bridge""", 1005, 1539, 90, 21)
val x116 = Vertex("""decouple interface and implementation""", 1115, 1560, 330, 42)
val x117 = Vertex("""Decouple an abstraction from its implementation so that the two can vary independently.""", 1115, 1461, 330, 84)
val x118 = Vertex("""Adapter""", 1005, 1341, 105, 21)
val x119 = Vertex("""wrap a legacy component""", 1130, 1404, 330, 42)
val x120 = Vertex("""Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.""", 1130, 1221, 330, 168)
val x121 = Vertex("""Creational Patterns""", 700, 610, 285, 21)
val x122 = Vertex("""Singleton""", 1005, 1095, 135, 21)
val x123 = Vertex("""Initialization on demand holder idiom""", 1160, 1164, 330, 42)
val x124 = Vertex("""class initialization phase is guaranteed by the JLS to be serial""", 1510, 1125, 330, 63)
val x125 = Vertex("""public static Singleton getInstance()""", 1160, 1068, 330, 42)
val x126 = Vertex("""Ensure a class only has one instance, and provide a global point of access to it.""", 1160, 969, 330, 84)
val x127 = Vertex("""Prototype""", 1005, 880, 135, 21)
val x128 = Vertex("""clone()""", 1160, 933, 105, 21)
val x129 = Vertex("""Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.""", 1160, 792, 330, 126)
val x130 = Vertex("""Factory Method""", 1005, 576, 210, 21)
val x131 = Vertex("""limitations: extensibility -> inheritance""", 1235, 735, 330, 42)
val x132 = Vertex("""Example: javax.xml.parsers.DocumentBuilderFactory""", 1235, 657, 330, 63)
val x133 = Vertex("""Descriptive names- avoid overloading""", 1235, 600, 330, 42)
val x134 = Vertex("""virtual creation through inheritance""", 1235, 543, 330, 42)
val x135 = Vertex("""Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.""", 1235, 360, 330, 168)
val x136 = Vertex("""Builder""", 1005, 250, 105, 21)
val x137 = Vertex("""creation of an aggregate's elements""", 1130, 303, 330, 42)
val x138 = Vertex("""Separate the construction of a complex object from its representation so that the same construction process can create different representations.""", 1130, 141, 330, 147)
val x139 = Vertex("""Abstract Factory""", 1005, 70, 240, 21)
val x140 = Vertex("""Provide an interface for creating families of related or dependent objects without specifying their concrete classes.""", 1265, 0, 330, 126)
MindMap("""Software design patterns""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140), List(Edge(x1, x2), Edge(x1, x3), Edge(x1, x9), Edge(x1, x16), Edge(x1, x31), Edge(x1, x33), Edge(x3, x4), Edge(x3, x5), Edge(x3, x6), Edge(x3, x7), Edge(x3, x8), Edge(x9, x10), Edge(x9, x15), Edge(x10, x11), Edge(x10, x13), Edge(x11, x12), Edge(x13, x14), Edge(x16, x17), Edge(x16, x20), Edge(x16, x21), Edge(x16, x27), Edge(x16, x29), Edge(x16, x30), Edge(x17, x18), Edge(x17, x19), Edge(x21, x22), Edge(x21, x23), Edge(x21, x26), Edge(x23, x24), Edge(x24, x25), Edge(x27, x28), Edge(x31, x32), Edge(x33, x34), Edge(x33, x53), Edge(x33, x98), Edge(x33, x121), Edge(x34, x35), Edge(x34, x36), Edge(x34, x37), Edge(x34, x39), Edge(x34, x40), Edge(x34, x41), Edge(x34, x44), Edge(x34, x46), Edge(x34, x47), Edge(x34, x52), Edge(x37, x38), Edge(x41, x42), Edge(x41, x43), Edge(x44, x45), Edge(x47, x48), Edge(x47, x49), Edge(x47, x50), Edge(x47, x51), Edge(x53, x54), Edge(x53, x57), Edge(x53, x60), Edge(x53, x65), Edge(x53, x68), Edge(x53, x72), Edge(x53, x75), Edge(x53, x79), Edge(x53, x83), Edge(x53, x88), Edge(x53, x95), Edge(x54, x55), Edge(x54, x56), Edge(x57, x58), Edge(x57, x59), Edge(x60, x61), Edge(x60, x62), Edge(x60, x63), Edge(x60, x64), Edge(x65, x66), Edge(x65, x67), Edge(x68, x69), Edge(x68, x70), Edge(x68, x71), Edge(x72, x73), Edge(x72, x74), Edge(x75, x76), Edge(x75, x77), Edge(x75, x78), Edge(x79, x80), Edge(x79, x81), Edge(x79, x82), Edge(x83, x84), Edge(x83, x85), Edge(x83, x86), Edge(x83, x87), Edge(x88, x89), Edge(x88, x90), Edge(x88, x91), Edge(x88, x92), Edge(x88, x93), Edge(x88, x94), Edge(x95, x96), Edge(x95, x97), Edge(x98, x99), Edge(x98, x101), Edge(x98, x105), Edge(x98, x108), Edge(x98, x111), Edge(x98, x115), Edge(x98, x118), Edge(x99, x100), Edge(x101, x102), Edge(x101, x103), Edge(x101, x104), Edge(x105, x106), Edge(x105, x107), Edge(x108, x109), Edge(x108, x110), Edge(x111, x112), Edge(x111, x113), Edge(x111, x114), Edge(x115, x116), Edge(x115, x117), Edge(x118, x119), Edge(x118, x120), Edge(x121, x122), Edge(x121, x127), Edge(x121, x130), Edge(x121, x136), Edge(x121, x139), Edge(x122, x123), Edge(x122, x125), Edge(x122, x126), Edge(x123, x124), Edge(x127, x128), Edge(x127, x129), Edge(x130, x131), Edge(x130, x132), Edge(x130, x133), Edge(x130, x134), Edge(x130, x135), Edge(x136, x137), Edge(x136, x138), Edge(x139, x140)))
}
)
}
