package models
object data {
val generated = List({
val x1 = Vertex("""beyond software architecture""", 0, 15527, 330, 42)
val x2 = Vertex("""Deployment Architecture""", 350, 29570, 330, 42)
val x3 = Vertex("""future of consumer s/w""", 700, 31018, 330, 21)
val x4 = Vertex("""deployment choice influence on software architecture""", 700, 30801, 330, 63)
val x5 = Vertex("""migration options""", 1050, 30982, 255, 21)
val x6 = Vertex("""data protection and access""", 1050, 30914, 330, 42)
val x7 = Vertex("""hosted - more complex and proceurual, evidennce etc""", 1400, 30904, 330, 63)
val x8 = Vertex("""customer site = customer problem""", 1400, 30847, 330, 42)
val x9 = Vertex("""upgrade policy""", 1050, 30769, 210, 21)
val x10 = Vertex("""MSP and able to deploy more regularly and easily""", 1280, 30769, 330, 63)
val x11 = Vertex("""customer site approach needs careful planning""", 1280, 30691, 330, 63)
val x12 = Vertex("""flexible, parameterized, or no integration options""", 1050, 30613, 330, 63)
val x13 = Vertex("""greatest demand when deployed to client site""", 1400, 30585, 330, 42)
val x14 = Vertex("""information appliance""", 700, 30510, 315, 21)
val x15 = Vertex("""simplifies complex solution""", 1035, 30528, 330, 42)
val x16 = Vertex("""ease of linux as appliance os""", 1035, 30471, 330, 42)
val x17 = Vertex("""hardware and software""", 1035, 30435, 315, 21)
val x18 = Vertex("""deployment architectures and distribution of work""", 700, 30357, 330, 63)
val x19 = Vertex("""choosing software deployment architecture""", 700, 30300, 330, 42)
val x20 = Vertex("""corporate influences on deployment""", 700, 29937, 330, 42)
val x21 = Vertex("""service not price""", 1050, 30264, 255, 21)
val x22 = Vertex("""geographical distribution""", 1050, 30207, 330, 42)
val x23 = Vertex("""support global - therefore language used in support""", 1400, 30168, 330, 63)
val x24 = Vertex("""cash flow""", 1050, 30132, 135, 21)
val x25 = Vertex("""infrastructure investment""", 1050, 30075, 330, 42)
val x26 = Vertex("""how much investment needed for creating xSP offering """, 1400, 30036, 330, 63)
val x27 = Vertex("""flexibility""", 1050, 29958, 165, 21)
val x28 = Vertex("""if not unto date need to support older versions""", 1235, 29958, 330, 63)
val x29 = Vertex("""customer sit installation less likely to be unto date""", 1235, 29880, 330, 63)
val x30 = Vertex("""sales cycle""", 1050, 29727, 165, 21)
val x31 = Vertex("""use xSP as stepping stone to self hosting""", 1235, 29823, 330, 42)
val x32 = Vertex("""once sale completed often want rapid deployment""", 1235, 29745, 330, 63)
val x33 = Vertex("""if want shorter cycle consider ASP model""", 1235, 29688, 330, 42)
val x34 = Vertex("""correlates to solution complexity and size""", 1235, 29631, 330, 42)
val x35 = Vertex("""time and no steps to realise a sale""", 1235, 29574, 330, 42)
val x36 = Vertex("""customer influences on deployment architectures""", 700, 29112, 330, 63)
val x37 = Vertex("""customer skills and experiences and geographical distribution""", 1050, 29457, 330, 63)
val x38 = Vertex("""if outsourced - need ability to manage supplier""", 1400, 29496, 330, 63)
val x39 = Vertex("""if customer to host - need to impart capability to customer""", 1400, 29418, 330, 63)
val x40 = Vertex("""deployment will dictate support skills needed""", 1400, 29340, 330, 63)
val x41 = Vertex("""costs and vendor confidence""", 1050, 29226, 330, 42)
val x42 = Vertex("""market perceptions of approach""", 1400, 29283, 330, 42)
val x43 = Vertex("""market viability """, 1400, 29247, 255, 21)
val x44 = Vertex("""customer perception - secure etc?""", 1400, 29190, 330, 42)
val x45 = Vertex("""cost to lease less than purchase for level of use""", 1400, 29112, 330, 63)
val x46 = Vertex("""data security/privacy and peak loads""", 1050, 29044, 330, 42)
val x47 = Vertex("""cost effectiveness - equip to peakload""", 1400, 29055, 330, 42)
val x48 = Vertex("""type of data impact leakage risk considerations""", 1400, 28977, 330, 63)
val x49 = Vertex("""control and integration""", 1050, 28813, 330, 42)
val x50 = Vertex("""increasing level of integration more likely to be on customer sight""", 1400, 28878, 330, 84)
val x51 = Vertex("""consider this when looking at MSP and ASP""", 1400, 28821, 330, 42)
val x52 = Vertex("""long term retention & mgmt of data""", 1400, 28764, 330, 42)
val x53 = Vertex("""assurance of support when needed """, 1400, 28707, 330, 42)
val x54 = Vertex("""customer need to control""", 1400, 28650, 330, 42)
val x55 = Vertex("""deployment choices""", 700, 28368, 270, 21)
val x56 = Vertex("""transactional (web services)""", 990, 28593, 330, 42)
val x57 = Vertex("""likely to grow with growth of web services""", 1340, 28593, 330, 42)
val x58 = Vertex("""not too common in enterprise presently""", 1340, 28536, 330, 42)
val x59 = Vertex("""managed service provider""", 990, 28471, 330, 42)
val x60 = Vertex("""SLAs common""", 1340, 28500, 165, 21)
val x61 = Vertex("""additional services to core app""", 1340, 28443, 330, 42)
val x62 = Vertex("""extends ASP model""", 1340, 28407, 255, 21)
val x63 = Vertex("""application service provider (ASP)""", 990, 28321, 330, 42)
val x64 = Vertex("""eg large enterprise solutions""", 1340, 28350, 330, 42)
val x65 = Vertex("""may not offer tech support""", 1340, 28293, 330, 42)
val x66 = Vertex("""provides service of app""", 1340, 28236, 330, 42)
val x67 = Vertex("""customer site""", 990, 28161, 195, 21)
val x68 = Vertex("""traditional approach""", 1205, 28200, 300, 21)
val x69 = Vertex("""supplier may subcontract to SI""", 1205, 28143, 330, 42)
val x70 = Vertex("""consultants often deploy of enterprise class""", 1205, 28086, 330, 42)
val x71 = Vertex("""Integration & Extension""", 350, 25572, 330, 42)
val x72 = Vertex("""managing APIs  over multiple releases""", 700, 27931, 330, 42)
val x73 = Vertex("""automated testing tools that identify or convert calls to depricated APIs""", 1050, 27987, 330, 84)
val x74 = Vertex("""backward compatibility layers""", 1050, 27930, 330, 42)
val x75 = Vertex("""provide 1 release of overlap""", 1050, 27873, 330, 42)
val x76 = Vertex("""2 full releases before a change removed as min""", 1400, 27834, 330, 63)
val x77 = Vertex("""(plenty of) warning of changes""", 1050, 27777, 330, 42)
val x78 = Vertex("""Business ramifications""", 700, 27213, 330, 21)
val x79 = Vertex("""license agreements""", 1050, 27741, 270, 21)
val x80 = Vertex("""user community""", 1050, 27583, 210, 21)
val x81 = Vertex("""user conferences""", 1280, 27705, 240, 21)
val x82 = Vertex("""mailing list""", 1280, 27669, 180, 21)
val x83 = Vertex("""educational materials""", 1280, 27622, 315, 21)
val x84 = Vertex("""additional knowledge base""", 1615, 27612, 330, 42)
val x85 = Vertex("""unofficial examples""", 1615, 27576, 285, 21)
val x86 = Vertex("""community website""", 1280, 27540, 255, 21)
val x87 = Vertex("""help understand how users are really using the product""", 1280, 27462, 330, 63)
val x88 = Vertex("""needs nurturing""", 1280, 27426, 225, 21)
val x89 = Vertex("""certification""", 1050, 27258, 195, 21)
val x90 = Vertex("""consider ...""", 1265, 27258, 180, 21)
val x91 = Vertex("""academic credentials""", 1465, 27390, 300, 21)
val x92 = Vertex("""independent certification """, 1465, 27333, 330, 42)
val x93 = Vertex("""professional recognition""", 1465, 27276, 330, 42)
val x94 = Vertex("""currency""", 1465, 27219, 120, 21)
val x95 = Vertex("""needs programme to be sustained""", 1605, 27219, 330, 42)
val x96 = Vertex("""more technical shorter training life value""", 1605, 27162, 330, 42)
val x97 = Vertex("""competitive edge""", 1465, 27126, 240, 21)
val x98 = Vertex("""product ecosystem""", 1465, 27090, 255, 21)
val x99 = Vertex("""training programs""", 1050, 26955, 255, 21)
val x100 = Vertex("""consider all possible audiences from users to SIs  to orgs building plugins""", 1325, 26991, 330, 84)
val x101 = Vertex("""include training on integration aspects""", 1325, 26934, 330, 42)
val x102 = Vertex("""potential to reduce support costs""", 1325, 26877, 330, 42)
val x103 = Vertex("""potential to improve customer satisfaction""", 1325, 26820, 330, 42)
val x104 = Vertex("""professional services""", 1050, 26734, 315, 21)
val x105 = Vertex("""consider working with SI""", 1385, 26763, 330, 42)
val x106 = Vertex("""consider releationship to product managers""", 1385, 26706, 330, 42)
val x107 = Vertex("""provision of expertise to integrate """, 1385, 26649, 330, 42)
val x108 = Vertex("""integration & extension of persistent data""", 700, 26135, 330, 42)
val x109 = Vertex("""not very desirable in most cases""", 1050, 26553, 330, 42)
val x110 = Vertex("""cost of schema changes to sustain backward compatibility""", 1400, 26571, 330, 63)
val x111 = Vertex("""failure to protect transactionality""", 1400, 26514, 330, 42)
val x112 = Vertex("""by pass of validation rules""", 1400, 26457, 330, 42)
val x113 = Vertex("""tell them whats going on""", 1050, 26400, 330, 42)
val x114 = Vertex("""ETL and old scripts""", 1050, 26364, 285, 21)
val x115 = Vertex("""spreadsheet pivot tables""", 1050, 26307, 330, 42)
val x116 = Vertex("""extract based approach""", 1400, 26318, 330, 21)
val x117 = Vertex("""relies on strong spreadsheet products""", 1400, 26261, 330, 42)
val x118 = Vertex("""hook tables""", 1050, 26069, 165, 21)
val x119 = Vertex("""can extend transaction execution time""", 1235, 26204, 330, 42)
val x120 = Vertex("""difficult to sustain relational integrity""", 1235, 26147, 330, 42)
val x121 = Vertex("""use GUIDs not auto incremental fields""", 1235, 26090, 330, 42)
val x122 = Vertex("""link to own data through common key""", 1235, 26033, 330, 42)
val x123 = Vertex("""identify events associated with DBs CRUD operations""", 1235, 25955, 330, 63)
val x124 = Vertex("""needs careful coordination in apps various layers""", 1235, 25877, 330, 63)
val x125 = Vertex("""user fields""", 1050, 25781, 165, 21)
val x126 = Vertex("""lack of proper data modelling""", 1235, 25820, 330, 42)
val x127 = Vertex("""not semantically meaningful""", 1235, 25763, 330, 42)
val x128 = Vertex("""avoid cost/effort of establishing additional tools""", 1235, 25685, 330, 63)
val x129 = Vertex("""views""", 1050, 25649, 75, 21)
val x130 = Vertex("""decouples application/physical schema""", 1145, 25621, 330, 42)
val x131 = Vertex("""integration & extension at business logic layers""", 700, 24851, 330, 63)
val x132 = Vertex("""extension through registration""", 1050, 25199, 330, 42)
val x133 = Vertex("""define error/exception protocols""", 1400, 25564, 330, 42)
val x134 = Vertex("""define resource management policies""", 1400, 25507, 330, 42)
val x135 = Vertex("""define execution control semantics""", 1400, 25442, 330, 42)
val x136 = Vertex("""process controls""", 1750, 25471, 240, 21)
val x137 = Vertex("""thread considerations""", 1750, 25435, 315, 21)
val x138 = Vertex("""calls are blocking or not""", 1750, 25378, 330, 42)
val x139 = Vertex("""define event model""", 1400, 25295, 270, 21)
val x140 = Vertex("""information provided in the callback""", 1690, 25321, 330, 42)
val x141 = Vertex("""notification format""", 1690, 25285, 285, 21)
val x142 = Vertex("""when they occur""", 1690, 25249, 225, 21)
val x143 = Vertex("""what events available""", 1690, 25213, 315, 21)
val x144 = Vertex("""define registration model""", 1400, 25120, 330, 42)
val x145 = Vertex("""provision of interfaces""", 1750, 25156, 330, 42)
val x146 = Vertex("""application restart""", 1750, 25120, 285, 21)
val x147 = Vertex("""use of configuration""", 1750, 25084, 300, 21)
val x148 = Vertex("""define tech detail e.g. when and how""", 1750, 25027, 330, 42)
val x149 = Vertex("""or through publish/subscribe model """, 1400, 24970, 330, 42)
val x150 = Vertex("""similar to observer design pattern""", 1400, 24913, 330, 42)
val x151 = Vertex("""means own app retains control""", 1400, 24856, 330, 42)
val x152 = Vertex("""register components and drive extensions through callback model""", 1400, 24778, 330, 63)
val x153 = Vertex("""integration through APIs""", 1050, 24458, 330, 42)
val x154 = Vertex("""API stabilised over multiple releases""", 1400, 24710, 330, 42)
val x155 = Vertex("""be prepared to take several releases to get right""", 1750, 24700, 330, 63)
val x156 = Vertex("""hard to predict API needs""", 1750, 24643, 330, 42)
val x157 = Vertex("""expose only what customers need - expose more and creates more work to maintain""", 1400, 24544, 330, 84)
val x158 = Vertex("""security & session data""", 1400, 24455, 330, 42)
val x159 = Vertex("""ability to manage sessions through interfaces""", 1750, 24466, 330, 63)
val x160 = Vertex("""apis with session id requirements are momre complex than those without""", 1750, 24367, 330, 84)
val x161 = Vertex("""naming conventions""", 1400, 24331, 270, 21)
val x162 = Vertex("""partner preferences""", 1400, 24295, 285, 21)
val x163 = Vertex("""market segment preferences - markets show preference to approach""", 1400, 24217, 330, 63)
val x164 = Vertex("""platform preferences - platforms have variations""", 1400, 24139, 330, 63)
val x165 = Vertex("""technologies & locus of control""", 1050, 24082, 330, 42)
val x166 = Vertex("""creating layered business architectures""", 700, 24025, 330, 42)
val x167 = Vertex("""layered business architectures - logical structures""", 700, 23935, 330, 63)
val x168 = Vertex("""variations on a theme""", 1050, 23989, 315, 21)
val x169 = Vertex("""persistent data layer""", 1050, 23953, 315, 21)
val x170 = Vertex("""domain model layer""", 1050, 23917, 270, 21)
val x171 = Vertex("""services layer""", 1050, 23881, 210, 21)
val x172 = Vertex("""user interface""", 1050, 23845, 210, 21)
val x173 = Vertex("""customer control - driving force""", 700, 23452, 330, 42)
val x174 = Vertex("""people adopting/supporting your API is commitment to you in the long term""", 1050, 23746, 330, 84)
val x175 = Vertex("""apis will also help test the system""", 1050, 23689, 330, 42)
val x176 = Vertex("""create a product ecosystem - e.g. other suppliers providing plugins solution""", 1050, 23590, 330, 84)
val x177 = Vertex("""increase switching costs - greater cost to move away from your solution - realised by customer integrating your solution closely to their others""", 1050, 23428, 330, 147)
val x178 = Vertex("""deliver more value by combining data with other systems""", 1050, 23350, 330, 63)
val x179 = Vertex("""larger solutions built from multiple smaller solutions""", 1050, 23272, 330, 63)
val x180 = Vertex("""customers don't want "we can't do that"""", 1050, 23215, 330, 42)
val x181 = Vertex("""provision of integration points is planning for expected future demands""", 1050, 23116, 330, 84)
val x182 = Vertex("""you cant predicate, but can plan""", 1050, 23059, 330, 42)
val x183 = Vertex("""Portability""", 350, 21782, 165, 21)
val x184 = Vertex("""beware the promises you make - could end up with commitments to support combinations that aren't cost effective""", 535, 22918, 330, 126)
val x185 = Vertex("""creating portable applications""", 535, 22295, 330, 42)
val x186 = Vertex("""matrix of pain""", 885, 22634, 210, 21)
val x187 = Vertex("""make the final cut of supported combinations of platform""", 1115, 22840, 330, 63)
val x188 = Vertex("""rank order configurations""", 1115, 22655, 330, 42)
val x189 = Vertex("""what will allow you to achieve highest level of coverage in testing""", 1465, 22741, 330, 84)
val x190 = Vertex("""what will be easiest to support""", 1465, 22684, 330, 42)
val x191 = Vertex("""what are the combinations that will be most heavily marketed """, 1465, 22606, 330, 63)
val x192 = Vertex("""what the most valuable customers using""", 1465, 22549, 330, 42)
val x193 = Vertex("""level of use  in market, i 1 in 1000 is it worth supporting?""", 1465, 22471, 330, 63)
val x194 = Vertex("""remove configurations eg some combinations of OS and DB don't warrant investment for support""", 1115, 22351, 330, 105)
val x195 = Vertex("""avoid hiding the power of a specific platform in the name of portability""", 885, 22252, 330, 84)
val x196 = Vertex("""if a platform is strong at something don't ignore it""", 1235, 22213, 330, 63)
val x197 = Vertex("""use XML for standardized interop comms between subsystems""", 885, 22135, 330, 63)
val x198 = Vertex("""closer to the user means less portability""", 885, 22067, 330, 42)
val x199 = Vertex("""UIs greater levels of differentiation, from resolution onwards""", 1235, 22057, 330, 63)
val x200 = Vertex("""backends typically more portable""", 1235, 22000, 330, 42)
val x201 = Vertex("""make business logic portable""", 885, 21943, 330, 42)
val x202 = Vertex("""use standards based persistent storage""", 885, 21886, 330, 42)
val x203 = Vertex("""use a interpreted language""", 885, 21779, 330, 42)
val x204 = Vertex("""ensure devs know to isolate platform dependencies""", 1235, 21808, 330, 63)
val x205 = Vertex("""if native language - ensure compiler available on all target OS""", 1235, 21730, 330, 63)
val x206 = Vertex("""interpreter insulates from OS differences""", 1235, 21673, 330, 42)
val x207 = Vertex("""business case for portability""", 535, 21322, 330, 42)
val x208 = Vertex("""identify the following before adopting platforms""", 885, 21527, 330, 63)
val x209 = Vertex("""impact of platform release cycles on own processs""", 1235, 21595, 330, 63)
val x210 = Vertex("""sufficient organisation resources to support all platforms""", 1235, 21517, 330, 63)
val x211 = Vertex("""take into account al costs inc dev, testing and support""", 1235, 21439, 330, 63)
val x212 = Vertex("""sufficient revenue for that platform""", 1235, 21382, 330, 42)
val x213 = Vertex("""consider the following points""", 885, 21205, 330, 42)
val x214 = Vertex("""complexity of multiple release cycles (testing as OS releases occur)""", 1235, 21283, 330, 84)
val x215 = Vertex("""testing time to ensure product works on a lll platforms""", 1235, 21205, 330, 63)
val x216 = Vertex("""cost of purchasing hardware & software for each supported platform""", 1235, 21127, 330, 63)
val x217 = Vertex("""cost of training developers,QA, support in developing and supporting multiple platforms""", 1235, 21028, 330, 84)
val x218 = Vertex("""primary driver should be profitability""", 885, 20971, 330, 42)
val x219 = Vertex("""perceived advantages of portability""", 535, 20738, 330, 42)
val x220 = Vertex("""true drivers for portability""", 885, 20875, 330, 42)
val x221 = Vertex("""1 or 2 early customer demand different solutions""", 1235, 20893, 330, 63)
val x222 = Vertex("""learning nuances of different versions of an OS can be tiresome""", 1235, 20815, 330, 63)
val x223 = Vertex("""portable code is cool""", 1235, 20779, 315, 21)
val x224 = Vertex("""claim-demonstrates that we can meet customers idiosyncratic needs""", 885, 20690, 330, 63)
val x225 = Vertex("""what if customer has chosen platform for specific features it offers""", 1235, 20680, 330, 84)
val x226 = Vertex("""reflects tech skill - not what customers want""", 1235, 20602, 330, 63)
val x227 = Vertex("""claim-we can address a new market segments""", 885, 20545, 330, 42)
val x228 = Vertex("""careful as platform alone doesn't provide full market segmentation""", 1235, 20506, 330, 63)
val x229 = Vertex("""Brand & Brand Elements""", 350, 19686, 330, 21)
val x230 = Vertex("""managing in-license brands""", 700, 20281, 330, 42)
val x231 = Vertex("""care if using other branding elements""", 1050, 20449, 330, 42)
val x232 = Vertex("""product areas to consider when changing""", 1050, 20252, 330, 42)
val x233 = Vertex("""sales collateral""", 1400, 20413, 240, 21)
val x234 = Vertex("""QA and auto testing""", 1400, 20377, 285, 21)
val x235 = Vertex("""error, information and diagnostic info""", 1400, 20320, 330, 42)
val x236 = Vertex("""naming and structure of APIs""", 1400, 20263, 330, 42)
val x237 = Vertex("""physical location or components""", 1400, 20206, 330, 42)
val x238 = Vertex("""QA and tech support tracking systems""", 1400, 20149, 330, 42)
val x239 = Vertex("""source code repositories""", 1400, 20092, 330, 42)
val x240 = Vertex("""subsystem names""", 1400, 20056, 225, 21)
val x241 = Vertex("""brand elements""", 700, 19461, 210, 21)
val x242 = Vertex("""when to use tm symbol""", 930, 20020, 315, 21)
val x243 = Vertex("""branding elements""", 930, 19942, 255, 21)
val x244 = Vertex("""brannded elements can be far reaching so changing can create significant work""", 1205, 19921, 330, 84)
val x245 = Vertex("""avoid changing when internalizing""", 1205, 19864, 330, 42)
val x246 = Vertex("""slogans""", 930, 19828, 105, 21)
val x247 = Vertex("""graphics""", 930, 19674, 120, 21)
val x248 = Vertex("""registration of trademark""", 1070, 19771, 330, 42)
val x249 = Vertex("""legal rights""", 1070, 19735, 180, 21)
val x250 = Vertex("""use of trademark symbol""", 1070, 19678, 330, 42)
val x251 = Vertex("""voice branding""", 1070, 19642, 210, 21)
val x252 = Vertex("""brand colours""", 1070, 19606, 195, 21)
val x253 = Vertex("""icons and splash screens""", 1070, 19549, 330, 42)
val x254 = Vertex("""may need outside designer support""", 1420, 19521, 330, 42)
val x255 = Vertex("""names""", 930, 19194, 75, 21)
val x256 = Vertex("""names are volatile, especially in 1st release""", 1025, 19443, 330, 63)
val x257 = Vertex("""error, diagnostic and info messages may contain brand elements""", 1025, 19365, 330, 63)
val x258 = Vertex("""configuration and logs may contain brand elements""", 1025, 19287, 330, 63)
val x259 = Vertex("""internationalization considerations""", 1025, 19230, 330, 42)
val x260 = Vertex("""good meaningful names""", 1025, 19173, 315, 21)
val x261 = Vertex("""marketing - positive associations""", 1360, 19173, 330, 42)
val x262 = Vertex("""recommend not let devs name""", 1360, 19116, 330, 42)
val x263 = Vertex("""sale of single components""", 1025, 19059, 330, 42)
val x264 = Vertex("""allow for the addition of new components""", 1025, 19002, 330, 42)
val x265 = Vertex("""physical location of system components""", 1025, 18934, 330, 42)
val x266 = Vertex("""suggest company name/product name/component name""", 1375, 18924, 330, 63)
val x267 = Vertex("""folder naming for element storage""", 1375, 18867, 330, 42)
val x268 = Vertex("""Technology In Licensing""", 350, 17131, 330, 42)
val x269 = Vertex("""licensing economics""", 700, 18831, 285, 21)
val x270 = Vertex("""license fees""", 700, 18795, 180, 21)
val x271 = Vertex("""open source licensing""", 700, 18759, 315, 21)
val x272 = Vertex("""managing in-licensed technology""", 700, 18702, 330, 42)
val x273 = Vertex("""create adaptor or wrappper e.g. JDBC""", 1050, 18674, 330, 42)
val x274 = Vertex("""honouring license agreements""", 700, 18518, 330, 42)
val x275 = Vertex("""Branding - can 3rd party logos be used etc""", 1050, 18617, 330, 42)
val x276 = Vertex("""support - how clients dealt with, directly/indirectly?""", 1050, 18539, 330, 63)
val x277 = Vertex("""APIs ca 3rd party app APIs be drectly exposed?""", 1050, 18461, 330, 63)
val x278 = Vertex("""need to ennsure technical terms are understoood and clearly defined""", 1050, 18362, 330, 84)
val x279 = Vertex("""when business models collide, negotiations ensue""", 700, 18284, 330, 63)
val x280 = Vertex("""licensing risks/rewards of licensing elements of a solution""", 700, 17363, 330, 63)
val x281 = Vertex("""licensing components will reduce service and support costs""", 1050, 18185, 330, 63)
val x282 = Vertex("""risk-if multiple 3rd parties who do you engage? Could result in infighting between your suppliers""", 1400, 18164, 330, 105)
val x283 = Vertex("""risk-of adding more problems and work arounds to address 3rd party""", 1400, 18086, 330, 63)
val x284 = Vertex("""licensing technology cheaper than starting from scratch""", 1050, 17987, 330, 63)
val x285 = Vertex("""risk-license fee changes can destroy economics""", 1400, 18008, 330, 63)
val x286 = Vertex("""risk-calculation based on providing equivelent, but don't need everything considered in calculation""", 1400, 17888, 330, 105)
val x287 = Vertex("""component is start of the art and use will future proof your application""", 1050, 17789, 330, 84)
val x288 = Vertex("""risk-sounds like resume driven design""", 1400, 17761, 330, 42)
val x289 = Vertex("""may relieve some burden of technology currency - as vendor continues to improve product""", 1050, 17662, 330, 84)
val x290 = Vertex("""risk-support dropped for elements or OSes""", 1400, 17673, 330, 42)
val x291 = Vertex("""risk-updates arent provided as quickly as needed""", 1400, 17595, 330, 63)
val x292 = Vertex("""vendor created components are lighter and consume fewer resources e.g. memory""", 1050, 17496, 330, 84)
val x293 = Vertex("""risk-may not be tuneable to own requirements""", 1400, 17496, 330, 42)
val x294 = Vertex("""risk-may prove to be heavier than expected""", 1400, 17439, 330, 42)
val x295 = Vertex("""vendor is creating something of a higher quality than you can achieve""", 1050, 17340, 330, 84)
val x296 = Vertex("""code may have been pushed & pulled a lot before reaching arket""", 1400, 17340, 330, 63)
val x297 = Vertex("""risk-presumption doesn't prove to be the case""", 1400, 17262, 330, 63)
val x298 = Vertex("""reduce time to market by reusing technology""", 1050, 17202, 330, 42)
val x299 = Vertex("""risk-doesn't always provide faster time to market - need to invest time to leverage technology""", 1400, 17142, 330, 105)
val x300 = Vertex("""can obtain protection by licensing technology protected by patent""", 1050, 17053, 330, 63)
val x301 = Vertex("""risk-doesnt exclude you from 3rd party patent disputes""", 1400, 17064, 330, 63)
val x302 = Vertex("""risk-indemnity, legal exception from liabilities from using the component""", 1400, 16965, 330, 84)
val x303 = Vertex("""allow you to concentrate on the value add elements""", 1050, 16858, 330, 63)
val x304 = Vertex("""risk-can mitigate with licenses such as GPL""", 1400, 16908, 330, 42)
val x305 = Vertex("""risk-incompatible business models (from simple export restrictions on the 3rd party lib)""", 1400, 16809, 330, 84)
val x306 = Vertex("""risk-configuration complexity increases""", 1400, 16752, 330, 42)
val x307 = Vertex("""promotion of component based software""", 1050, 16695, 330, 42)
val x308 = Vertex("""risk-s/w becomes to interwined in own solution to undo/replace""", 1400, 16656, 330, 63)
val x309 = Vertex("""reduce, manage or eliminate complexity (taking solution from SME)""", 1050, 16549, 330, 63)
val x310 = Vertex("""risk-provider goes bust""", 1400, 16599, 330, 42)
val x311 = Vertex("""risk-supplier changes focus meaning no longer got capability""", 1400, 16521, 330, 63)
val x312 = Vertex("""risk-reliance on 3rd party, if they evolve in different direction""", 1400, 16443, 330, 63)
val x313 = Vertex("""Contracts""", 700, 15919, 135, 21)
val x314 = Vertex("""get expert legal advise""", 855, 16386, 330, 42)
val x315 = Vertex("""terms""", 855, 15909, 75, 21)
val x316 = Vertex("""marketing - uuse of logos""", 950, 16329, 330, 42)
val x317 = Vertex("""access to source code e.g. escrow""", 950, 16272, 330, 42)
val x318 = Vertex("""non coompetition clauses""", 950, 16215, 330, 42)
val x319 = Vertex("""deployment restrictions""", 950, 16158, 330, 42)
val x320 = Vertex("""fees/payment terms""", 950, 16122, 270, 21)
val x321 = Vertex("""renewal""", 950, 16054, 105, 21)
val x322 = Vertex("""auto renewal - could pay too much or too little""", 1075, 16044, 330, 63)
val x323 = Vertex("""risk of false sense of security""", 1075, 15987, 330, 42)
val x324 = Vertex("""termination - agreement withdrawal """, 950, 15912, 330, 42)
val x325 = Vertex("""possible financial clauses e.g. bankruptcy""", 1300, 15930, 330, 42)
val x326 = Vertex("""possible notice of withdrawal """, 1300, 15873, 330, 42)
val x327 = Vertex("""from 30days to 1year""", 1300, 15837, 300, 21)
val x328 = Vertex("""sublicense - can you license 3rd party solution with your solution into another product""", 950, 15738, 330, 84)
val x329 = Vertex("""exclusivity - how much the licnesee may allow others to use solution""", 950, 15639, 330, 84)
val x330 = Vertex("""specific use - constraints oon application""", 950, 15582, 330, 42)
val x331 = Vertex("""territory - where llicennse ca be used""", 950, 15525, 330, 42)
val x332 = Vertex("""duration of term or other kkey dates""", 950, 15468, 330, 42)
val x333 = Vertex("""usage or grant""", 950, 15432, 210, 21)
val x334 = Vertex("""basics""", 855, 15396, 90, 21)
val x335 = Vertex("""Product Development""", 350, 13283, 285, 21)
val x336 = Vertex("""role""", 655, 15225, 60, 21)
val x337 = Vertex("""big picture perspective""", 735, 15339, 330, 42)
val x338 = Vertex("""pricing etc""", 735, 15303, 165, 21)
val x339 = Vertex("""MRDs - Marketing Requirements Document""", 735, 15246, 330, 42)
val x340 = Vertex("""supporting the process of marketing""", 735, 15189, 330, 42)
val x341 = Vertex("""separation so that failing projectscan be pulled""", 735, 15111, 330, 63)
val x342 = Vertex("""managing projects developing a product""", 735, 15054, 330, 42)
val x343 = Vertex("""Crucial Product Management Concepts""", 655, 14635, 330, 42)
val x344 = Vertex("""position and positioning""", 1005, 14997, 330, 42)
val x345 = Vertex("""main message""", 1355, 14997, 180, 21)
val x346 = Vertex("""brand""", 1355, 14961, 75, 21)
val x347 = Vertex("""whole product""", 1005, 14871, 195, 21)
val x348 = Vertex("""target product""", 1220, 14925, 210, 21)
val x349 = Vertex("""potential product""", 1220, 14889, 255, 21)
val x350 = Vertex("""augmented product""", 1220, 14853, 255, 21)
val x351 = Vertex("""expected product""", 1220, 14817, 240, 21)
val x352 = Vertex("""generic product""", 1220, 14781, 225, 21)
val x353 = Vertex("""S shaped curve of adoption""", 1005, 14724, 330, 42)
val x354 = Vertex("""can impact architecture""", 1355, 14724, 330, 42)
val x355 = Vertex("""innovators, late majority, laggards etc""", 1355, 14667, 330, 42)
val x356 = Vertex("""market""", 1005, 14602, 90, 21)
val x357 = Vertex("""market segmentation""", 1115, 14631, 285, 21)
val x358 = Vertex("""total addressable market""", 1115, 14574, 330, 42)
val x359 = Vertex("""total available market""", 1115, 14538, 330, 21)
val x360 = Vertex("""four Ps of marketing""", 1005, 14377, 300, 21)
val x361 = Vertex("""promotion (advertising and marketing)""", 1325, 14481, 330, 42)
val x362 = Vertex("""place (distribution channel)""", 1325, 14424, 330, 42)
val x363 = Vertex("""through partners?""", 1675, 14424, 255, 21)
val x364 = Vertex("""direct through web?""", 1675, 14388, 285, 21)
val x365 = Vertex("""price""", 1325, 14320, 75, 21)
val x366 = Vertex("""best is when aligned with customer value perception""", 1420, 14310, 330, 63)
val x367 = Vertex("""not correlated technical difficulty!""", 1420, 14253, 330, 42)
val x368 = Vertex("""product (offering)""", 1325, 14217, 270, 21)
val x369 = Vertex("""augmenting the product development process""", 655, 13993, 330, 42)
val x370 = Vertex("""recycle bin""", 1005, 14181, 165, 21)
val x371 = Vertex("""if bitten off too much - put stuff here""", 1190, 14153, 330, 42)
val x372 = Vertex("""change management protocols""", 1005, 14078, 330, 42)
val x373 = Vertex("""enables proper preparation for change""", 1355, 14096, 330, 42)
val x374 = Vertex("""lenient = none""", 1355, 14060, 210, 21)
val x375 = Vertex("""formality of allowing change control""", 1355, 14003, 330, 42)
val x376 = Vertex("""successive freezing""", 1005, 13886, 285, 21)
val x377 = Vertex("""not stopping development - but agreeing breakpoints for change control""", 1310, 13904, 330, 84)
val x378 = Vertex("""requirements""", 1310, 13868, 180, 21)
val x379 = Vertex("""process of focussing, then stopping things becoming a moving target""", 1310, 13769, 330, 84)
val x380 = Vertex("""processes (it isn't like that)""", 655, 13641, 330, 42)
val x381 = Vertex("""not a lll stages are equal""", 1005, 13712, 330, 42)
val x382 = Vertex("""stage gated approaches doesn't equal waterfall""", 1005, 13634, 330, 63)
val x383 = Vertex("""product development may be waterfall like, that doesn't bind development process to non agile approaches""", 1005, 13514, 330, 105)
val x384 = Vertex("""Product Development Processes""", 655, 12342, 330, 42)
val x385 = Vertex("""launch""", 1005, 13478, 90, 21)
val x386 = Vertex("""prelaunch""", 1005, 13442, 135, 21)
val x387 = Vertex("""maybe parallel to other processes""", 1160, 13414, 330, 42)
val x388 = Vertex("""final quality assurance""", 1005, 13037, 330, 42)
val x389 = Vertex("""easy to blinded by automated tests - e.g. automated test cant assess impact of removing h/w if you have a h/w dependency""", 1355, 13273, 330, 126)
val x390 = Vertex("""in addition to testing QA offers""", 1355, 13045, 330, 42)
val x391 = Vertex("""contributing testing requirements""", 1705, 13216, 330, 42)
val x392 = Vertex("""support dev and design to aid testing""", 1705, 13159, 330, 42)
val x393 = Vertex("""support daily build process and source code""", 1705, 13102, 330, 42)
val x394 = Vertex("""help support replicate customer issues""", 1705, 13045, 330, 42)
val x395 = Vertex("""help support wit workarounds""", 1705, 12988, 330, 42)
val x396 = Vertex("""assist dev with rot cause analysis""", 1705, 12931, 330, 42)
val x397 = Vertex("""collecting & publishing testing metrics""", 1705, 12874, 330, 42)
val x398 = Vertex("""monitoring and enforcement of dev processes""", 1705, 12817, 330, 42)
val x399 = Vertex("""shipping decision is a collaborative activity""", 1355, 12739, 330, 63)
val x400 = Vertex("""measurements to allow decision of when to ship""", 1355, 12661, 330, 63)
val x401 = Vertex("""development""", 1005, 12458, 165, 21)
val x402 = Vertex("""process overlaps e.g. development, alpha testing, tech doc etc""", 1190, 12583, 330, 63)
val x403 = Vertex("""development process based on several factors""", 1190, 12469, 330, 42)
val x404 = Vertex("""see Journey of the Software Professional for more detail""", 1540, 12505, 330, 63)
val x405 = Vertex("""product characteristics""", 1540, 12448, 330, 42)
val x406 = Vertex("""geographic distribution""", 1540, 12391, 330, 42)
val x407 = Vertex("""size""", 1540, 12355, 60, 21)
val x408 = Vertex("""product development starts to look at after development is complete""", 1190, 12256, 330, 84)
val x409 = Vertex("""development plan""", 1005, 12074, 240, 21)
val x410 = Vertex("""take into account supporting activities e.g. QA and tech author""", 1265, 12178, 330, 63)
val x411 = Vertex("""identify documentation and other artefacts needed""", 1265, 12100, 330, 63)
val x412 = Vertex("""get clarity of requirements""", 1265, 12043, 330, 42)
val x413 = Vertex("""develop architectural concepts""", 1265, 11986, 330, 42)
val x414 = Vertex("""marketing needs""", 1265, 11950, 225, 21)
val x415 = Vertex("""get requirement priorities""", 1265, 11893, 330, 42)
val x416 = Vertex("""product proposal/business plan""", 1005, 11588, 330, 42)
val x417 = Vertex("""can be divided into segments""", 1355, 11624, 330, 42)
val x418 = Vertex("""product extensions and futures""", 1705, 11836, 330, 42)
val x419 = Vertex("""critical risks""", 1705, 11800, 210, 21)
val x420 = Vertex("""cost analysis""", 1705, 11764, 195, 21)
val x421 = Vertex("""impact analysis, busiess model, revenue forecast""", 1705, 11686, 330, 63)
val x422 = Vertex("""support model""", 1705, 11650, 195, 21)
val x423 = Vertex("""channel strategy""", 1705, 11614, 240, 21)
val x424 = Vertex("""marketing strategy""", 1705, 11578, 270, 21)
val x425 = Vertex("""product positioning""", 1705, 11542, 285, 21)
val x426 = Vertex("""competitive annalysis & product differentiation""", 1705, 11464, 330, 63)
val x427 = Vertex("""production description""", 1705, 11428, 330, 21)
val x428 = Vertex("""financial analysis""", 1705, 11392, 270, 21)
val x429 = Vertex("""market analysis""", 1705, 11356, 225, 21)
val x430 = Vertex("""harden requirements""", 1355, 11320, 285, 21)
val x431 = Vertex("""justify the product""", 1355, 11284, 285, 21)
val x432 = Vertex("""concept proposal""", 1005, 11227, 240, 21)
val x433 = Vertex("""feasability""", 1265, 11248, 165, 21)
val x434 = Vertex("""get business data together to support proposal""", 1265, 11170, 330, 63)
val x435 = Vertex("""Software Architecture""", 350, 10271, 315, 21)
val x436 = Vertex("""the team""", 685, 11063, 120, 21)
val x437 = Vertex("""grow team out from this initial core""", 825, 11113, 330, 42)
val x438 = Vertex("""keep team small when creating architecture - benefits from highly cohesive team""", 825, 11014, 330, 84)
val x439 = Vertex("""ability of team to support architecture""", 825, 10957, 330, 42)
val x440 = Vertex("""creating architectural understanding""", 685, 10871, 330, 42)
val x441 = Vertex("""avoid need to resort to code""", 1035, 10900, 330, 42)
val x442 = Vertex("""appropriate use of models""", 1035, 10843, 330, 42)
val x443 = Vertex("""use of architecture diags to communicate""", 1035, 10786, 330, 42)
val x444 = Vertex("""principles""", 685, 10592, 150, 21)
val x445 = Vertex("""deferral""", 855, 10729, 120, 21)
val x446 = Vertex("""good architecture limit impacts of deferral""", 995, 10729, 330, 42)
val x447 = Vertex("""don't make decision til need to""", 995, 10672, 330, 42)
val x448 = Vertex("""parameterization""", 855, 10636, 240, 21)
val x449 = Vertex("""IoC""", 1115, 10636, 45, 21)
val x450 = Vertex("""aka configurability""", 1115, 10600, 285, 21)
val x451 = Vertex("""high cohesion""", 855, 10564, 195, 21)
val x452 = Vertex("""appropriate granularity""", 855, 10507, 330, 42)
val x453 = Vertex("""loose coupling""", 855, 10471, 210, 21)
val x454 = Vertex("""interfaces""", 855, 10435, 150, 21)
val x455 = Vertex("""encapsulation""", 855, 10399, 195, 21)
val x456 = Vertex("""Architectural Care and Feeding""", 685, 10171, 330, 42)
val x457 = Vertex("""License Compliance""", 1035, 10363, 270, 21)
val x458 = Vertex("""Known Bugs""", 1035, 10327, 150, 21)
val x459 = Vertex("""Technical Debit""", 1035, 10231, 225, 21)
val x460 = Vertex("""if not managed can lead to need a rewrite""", 1280, 10270, 330, 42)
val x461 = Vertex("""if not managed - then cost escalates - cost + interest""", 1280, 10192, 330, 63)
val x462 = Vertex("""pragmatism for getting a release out""", 1280, 10135, 330, 42)
val x463 = Vertex("""Technological Currency""", 1035, 10039, 330, 21)
val x464 = Vertex("""could have licensing/support issues if not managed""", 1385, 10057, 330, 63)
val x465 = Vertex("""easy to keep upto date if regularly managed""", 1385, 10000, 330, 42)
val x466 = Vertex("""keep with tech improvements""", 1385, 9943, 330, 42)
val x467 = Vertex("""Architectural Evolution and Maturation - Feature vs Capability""", 685, 9865, 330, 63)
val x468 = Vertex("""Patterns and Architecture""", 685, 9808, 330, 42)
val x469 = Vertex("""draw on existing knowledge""", 1035, 9808, 330, 42)
val x470 = Vertex("""jump start architecture""", 1035, 9751, 330, 42)
val x471 = Vertex("""Creating an Architecture""", 685, 9694, 330, 42)
val x472 = Vertex("""challenge of providing vs time to market""", 1035, 9666, 330, 42)
val x473 = Vertex("""Why Architecture Matters""", 685, 9519, 330, 42)
val x474 = Vertex("""sustainable, unfair advantage""", 1035, 9609, 330, 42)
val x475 = Vertex("""boundaries""", 1035, 9573, 150, 21)
val x476 = Vertex("""social structure""", 1035, 9537, 240, 21)
val x477 = Vertex("""profitability""", 1035, 9501, 195, 21)
val x478 = Vertex("""degree & nature of change""", 1035, 9444, 330, 42)
val x479 = Vertex("""stability""", 1035, 9408, 135, 21)
val x480 = Vertex("""longevity""", 1035, 9372, 135, 21)
val x481 = Vertex("""Business and License Model Symbiosis""", 350, 6154, 330, 42)
val x482 = Vertex("""considerations for license models""", 700, 9205, 330, 42)
val x483 = Vertex("""implications to license payments - e.g. SMB or SOHO perhaps needs online credit card payment renewal support""", 1050, 9252, 330, 105)
val x484 = Vertex("""period of license - month, quarter, year etc""", 1050, 9195, 330, 42)
val x485 = Vertex("""some licenses could be geographically constrained e.g. site license (field-of-use model)""", 1050, 9096, 330, 84)
val x486 = Vertex("""different modules maybe licensed differently""", 1050, 9039, 330, 42)
val x487 = Vertex("""market maturity influences on the business model""", 700, 8922, 330, 63)
val x488 = Vertex("""better to be able t support multiple models""", 1050, 8982, 330, 42)
val x489 = Vertex("""mature market - need licensing model(s) to allow max share and revenue""", 1050, 8883, 330, 84)
val x490 = Vertex("""emerging market - easy for force model on customers""", 1050, 8805, 330, 63)
val x491 = Vertex("""enforcing licensing models""", 700, 8431, 330, 42)
val x492 = Vertex("""the client""", 1050, 8769, 150, 21)
val x493 = Vertex("""3rd party or professional license managers""", 1050, 8595, 330, 42)
val x494 = Vertex("""license distribution capabilities/constraints""", 1400, 8691, 330, 63)
val x495 = Vertex("""operational requirements the license manager introduces""", 1400, 8613, 330, 63)
val x496 = Vertex("""how easy to integrate & volume capabilities""", 1400, 8556, 330, 42)
val x497 = Vertex("""check cracker web sites to determine license manager strength""", 1400, 8478, 330, 63)
val x498 = Vertex("""considerations for OS support""", 1400, 8421, 330, 42)
val x499 = Vertex("""home grown license managers""", 1050, 8314, 330, 42)
val x500 = Vertex("""in some cases this is fine and doesnt need to be iron clad""", 1400, 8343, 330, 63)
val x501 = Vertex("""commonly needed for session based licensing""", 1400, 8286, 330, 42)
val x502 = Vertex("""tend not to be industrial strength - therefore easy to defeat""", 1400, 8208, 330, 63)
val x503 = Vertex("""honour system """, 1050, 8133, 210, 21)
val x504 = Vertex("""revenue risk?""", 1280, 8172, 195, 21)
val x505 = Vertex("""implications on relationship with customer""", 1280, 8115, 330, 42)
val x506 = Vertex("""still protected by contract law""", 1280, 8058, 330, 42)
val x507 = Vertex("""architectural support for the business model""", 700, 7361, 330, 42)
val x508 = Vertex("""questions to consider""", 1050, 7915, 315, 21)
val x509 = Vertex("""pricing model""", 1385, 8022, 195, 21)
val x510 = Vertex("""effect of business model on tech architecture""", 1385, 7944, 330, 63)
val x511 = Vertex("""your business model""", 1385, 7908, 285, 21)
val x512 = Vertex("""what are your objectives relative to target market""", 1385, 7830, 330, 63)
val x513 = Vertex("""what is target market - what does it value""", 1385, 7773, 330, 42)
val x514 = Vertex("""consideration as to whether or not to have copy protection scheme - tighter hardware ties reduce rate of piracy eg game cartridges""", 1050, 7632, 330, 126)
val x515 = Vertex("""implications of changes on revenue e.g. performance improvement on hardware based licensing""", 1050, 7512, 330, 105)
val x516 = Vertex("""consider costs of the architecture on the customer""", 1050, 7434, 330, 63)
val x517 = Vertex("""need architecture to capture appropriate info""", 1050, 7356, 330, 63)
val x518 = Vertex("""hardware""", 1050, 7320, 120, 21)
val x519 = Vertex("""metering""", 1050, 7216, 120, 21)
val x520 = Vertex("""users gone or just inactive?""", 1190, 7263, 330, 42)
val x521 = Vertex("""counting concurrent users (not session)""", 1190, 7206, 330, 42)
val x522 = Vertex("""how many users""", 1190, 7170, 210, 21)
val x523 = Vertex("""authentication of users""", 1190, 7113, 330, 42)
val x524 = Vertex("""transaction""", 1050, 6931, 165, 21)
val x525 = Vertex("""implications of transaction states, lifecycle and duration""", 1235, 7035, 330, 63)
val x526 = Vertex("""uniquely name transactions""", 1235, 6978, 330, 42)
val x527 = Vertex("""need an audit trail""", 1235, 6942, 285, 21)
val x528 = Vertex("""relationship between transaction and business model""", 1235, 6864, 330, 63)
val x529 = Vertex("""possible challenges eg distributed transactions""", 1235, 6786, 330, 63)
val x530 = Vertex("""define a transaction""", 1235, 6750, 300, 21)
val x531 = Vertex("""time based access or usage""", 1050, 6693, 330, 42)
val x532 = Vertex("""commonly dont disable but stop updates""", 1400, 6665, 330, 42)
val x533 = Vertex("""rights associated with business model""", 700, 6608, 330, 42)
val x534 = Vertex("""figure 4.1 common matching of licensing to rights""", 1050, 6587, 330, 63)
val x535 = Vertex("""clarity of rights""", 1050, 6551, 255, 21)
val x536 = Vertex("""common software business models""", 700, 4744, 330, 42)
val x537 = Vertex("""services""", 1050, 6501, 120, 21)
val x538 = Vertex("""software is free, but charge for each service e.g. email, spam filter""", 1190, 6452, 330, 84)
val x539 = Vertex("""services offered based on-top of existing framework or OS""", 1050, 6374, 330, 63)
val x540 = Vertex("""unrestricted""", 1050, 6338, 180, 21)
val x541 = Vertex("""proportion of revenue base""", 1050, 6185, 330, 42)
val x542 = Vertex("""not very popular as it compels customer to track details""", 1400, 6260, 330, 63)
val x543 = Vertex("""need to consider min revenue gain/save""", 1400, 6203, 330, 42)
val x544 = Vertex("""agreement on calculated benchmarks """, 1400, 6146, 330, 42)
val x545 = Vertex("""need to agree comparative benchmarks""", 1400, 6089, 330, 42)
val x546 = Vertex("""percentage of revenue created or costs saved""", 1400, 6032, 330, 42)
val x547 = Vertex("""hardware""", 1050, 5943, 120, 21)
val x548 = Vertex("""per cpu - or other h/w element - but problem when coming to virtualisation""", 1190, 5933, 330, 84)
val x549 = Vertex("""software could be free - but hardware non functional without s/w""", 1190, 5855, 330, 63)
val x550 = Vertex("""metering""", 1050, 5544, 120, 21)
val x551 = Vertex("""consumptive resource management""", 1190, 5709, 330, 42)
val x552 = Vertex("""reporting on consumption""", 1540, 5798, 330, 42)
val x553 = Vertex("""need to enable understanding for user on their likely usage consumption""", 1540, 5699, 330, 84)
val x554 = Vertex("""could define a resource - e.g. no times a function is invoked""", 1540, 5621, 330, 63)
val x555 = Vertex("""number of hours usage of a resource""", 1540, 5564, 330, 42)
val x556 = Vertex("""identified resource management""", 1190, 5507, 330, 42)
val x557 = Vertex("""x out of y plugins active at once""", 1540, 5497, 330, 42)
val x558 = Vertex("""e.g. named users""", 1540, 5461, 240, 21)
val x559 = Vertex("""concurrent resource management""", 1190, 5375, 330, 42)
val x560 = Vertex("""users not equal to sessions""", 1540, 5404, 330, 42)
val x561 = Vertex("""need clarity of user/session definition""", 1540, 5347, 330, 42)
val x562 = Vertex("""eg concurrent users or sessions""", 1540, 5290, 330, 42)
val x563 = Vertex("""resource managed constraints""", 1190, 5233, 330, 42)
val x564 = Vertex("""transaction""", 1050, 4862, 165, 21)
val x565 = Vertex("""ways of working out transaction value""", 1235, 5033, 330, 42)
val x566 = Vertex("""harder to raise the price, compared to lower for same product""", 1585, 5155, 330, 63)
val x567 = Vertex("""pricing reflects market maturity""", 1585, 5098, 330, 42)
val x568 = Vertex("""pricing should be clear""", 1585, 5041, 330, 42)
val x569 = Vertex("""prices reflects competitive landscape""", 1585, 4984, 330, 42)
val x570 = Vertex("""price to support positioning""", 1585, 4927, 330, 42)
val x571 = Vertex("""price should reflect effort""", 1585, 4870, 330, 42)
val x572 = Vertex("""prices reflects value""", 1585, 4834, 315, 21)
val x573 = Vertex("""fees can be calculated different ways""", 1235, 4730, 330, 42)
val x574 = Vertex("""processing fees (post processing calculated fee charged)""", 1585, 4756, 330, 63)
val x575 = Vertex("""sliding fees (volume discounting)""", 1585, 4699, 330, 42)
val x576 = Vertex("""percentage fees""", 1585, 4663, 225, 21)
val x577 = Vertex("""flat fee""", 1585, 4627, 120, 21)
val x578 = Vertex("""could be each piece of executed software - known as tie and die""", 1235, 4549, 330, 63)
val x579 = Vertex("""measurable units of work""", 1235, 4492, 330, 42)
val x580 = Vertex("""time based access or usage""", 1050, 3714, 330, 42)
val x581 = Vertex("""OEM""", 1400, 4456, 45, 21)
val x582 = Vertex("""Original Equipment Manufacturer""", 1465, 4428, 330, 42)
val x583 = Vertex("""per user license""", 1400, 4371, 240, 21)
val x584 = Vertex("""contractual base - agree estimated volume""", 1660, 4371, 330, 42)
val x585 = Vertex("""volume seat licensing for enterprise""", 1660, 4314, 330, 42)
val x586 = Vertex("""what happens if user uses outside of period?""", 1400, 4207, 330, 42)
val x587 = Vertex("""track and charge for usage - creates complex architecture demands e.g. like car rental""", 1750, 4215, 330, 84)
val x588 = Vertex("""cut off usage- although very server""", 1750, 4158, 330, 42)
val x589 = Vertex("""grace period for payment?""", 1750, 4101, 330, 42)
val x590 = Vertex("""subscriptions""", 1400, 4005, 195, 21)
val x591 = Vertex("""more likely to include patches and upgrades""", 1615, 4044, 330, 42)
val x592 = Vertex("""common for backend services""", 1615, 3987, 330, 42)
val x593 = Vertex("""same as annual/rental but with slightly different rights""", 1615, 3909, 330, 63)
val x594 = Vertex("""rental""", 1400, 3742, 90, 21)
val x595 = Vertex("""may not include updates and patches - additional contract for these""", 1510, 3810, 330, 84)
val x596 = Vertex("""changing rental features may allow penetration into smaller/lower cost markets""", 1510, 3711, 330, 84)
val x597 = Vertex("""common in some industries e.g. software testing""", 1510, 3633, 330, 63)
val x598 = Vertex("""essentially same as annnual""", 1510, 3576, 330, 42)
val x599 = Vertex("""annual""", 1400, 3412, 90, 21)
val x600 = Vertex("""common for enterprise solutions""", 1510, 3519, 330, 42)
val x601 = Vertex("""renewal maybe automatic, renewal maybe different price to initial purchase""", 1510, 3420, 330, 84)
val x602 = Vertex("""tech support / consulting maybe additional""", 1510, 3363, 330, 42)
val x603 = Vertex("""usually includes updates and patches""", 1510, 3306, 330, 42)
val x604 = Vertex("""effective from installation, or first use""", 1510, 3249, 330, 42)
val x605 = Vertex("""perpetual""", 1400, 3093, 135, 21)
val x606 = Vertex("""maybe required if product is embedded into larger solution e.g. runtime libraries, hardware devices""", 1555, 3129, 330, 105)
val x607 = Vertex("""can create costs for supporting all versions if not careful""", 1555, 3051, 330, 63)
val x608 = Vertex("""maintenance fee typically 15-30%""", 1555, 2994, 330, 42)
val x609 = Vertex("""support, upgrades normally excluded""", 1555, 2937, 330, 42)
val x610 = Vertex("""difference between marketecture and tarchitecture""", 350, 1468, 330, 63)
val x611 = Vertex("""tarchitecture = technical architecture
(view that dev work with)""", 700, 2854, 330, 63)
val x612 = Vertex("""patterns""", 1050, 2901, 120, 21)
val x613 = Vertex("""distribution of processes""", 1050, 2844, 330, 42)
val x614 = Vertex("""interfaces""", 1050, 2808, 150, 21)
val x615 = Vertex("""subsystems""", 1050, 2772, 150, 21)
val x616 = Vertex("""marketecture = marketing architecture""", 700, 2700, 330, 42)
val x617 = Vertex("""value proposition""", 1050, 2736, 255, 21)
val x618 = Vertex("""selling model""", 1050, 2700, 195, 21)
val x619 = Vertex("""licensing""", 1050, 2664, 135, 21)
val x620 = Vertex("""business model""", 1050, 2628, 210, 21)
val x621 = Vertex("""context diagrams and target products""", 700, 2478, 330, 42)
val x622 = Vertex("""target platforms""", 1050, 2592, 240, 21)
val x623 = Vertex("""integration and extension options""", 1050, 2535, 330, 42)
val x624 = Vertex("""value proposition""", 1050, 2499, 255, 21)
val x625 = Vertex("""potential parters and market synergies""", 1050, 2442, 330, 42)
val x626 = Vertex("""technologies customers use and know""", 1050, 2385, 330, 42)
val x627 = Vertex("""higher level views of the world""", 1050, 2328, 330, 42)
val x628 = Vertex("""working in unison""", 700, 2221, 255, 21)
val x629 = Vertex("""make information available e.g maps""", 975, 2271, 330, 42)
val x630 = Vertex("""avoid filbert thinking of different groups involved""", 975, 2193, 330, 63)
val x631 = Vertex("""agree processes and principles that drive the project""", 975, 2115, 330, 63)
val x632 = Vertex("""generating clarity""", 700, 2050, 270, 21)
val x633 = Vertex("""comunicate impacts""", 990, 2079, 270, 21)
val x634 = Vertex("""larger projects - need more formality""", 990, 2022, 330, 42)
val x635 = Vertex("""form of communication""", 990, 1986, 315, 21)
val x636 = Vertex("""harnessing feedback""", 700, 1672, 285, 21)
val x637 = Vertex("""avoid when gathering info ...""", 1005, 1875, 330, 42)
val x638 = Vertex("""be judgemental on contributor/contribution""", 1355, 1929, 330, 42)
val x639 = Vertex("""set expectations""", 1355, 1893, 240, 21)
val x640 = Vertex("""being negative about product""", 1355, 1836, 330, 42)
val x641 = Vertex("""making commitments """, 1355, 1800, 285, 21)
val x642 = Vertex("""making promises""", 1355, 1764, 225, 21)
val x643 = Vertex("""market architects ...""", 1005, 1615, 315, 21)
val x644 = Vertex("""meet key customers""", 1340, 1728, 270, 21)
val x645 = Vertex("""talk with advisory groups""", 1340, 1671, 330, 42)
val x646 = Vertex("""market analysts""", 1340, 1635, 225, 21)
val x647 = Vertex("""talking with sales teams""", 1340, 1578, 330, 42)
val x648 = Vertex("""win/loss analysis""", 1690, 1560, 255, 21)
val x649 = Vertex("""review 1st & 2nd line issue logs""", 1340, 1503, 330, 42)
val x650 = Vertex("""user conferences""", 1340, 1467, 240, 21)
val x651 = Vertex("""tech architects""", 1005, 1413, 225, 21)
val x652 = Vertex("""training""", 1250, 1431, 120, 21)
val x653 = Vertex("""journals""", 1250, 1395, 120, 21)
val x654 = Vertex("""conferences""", 1250, 1359, 165, 21)
val x655 = Vertex("""projecting the future""", 700, 1156, 315, 21)
val x656 = Vertex("""regularly review & maintain maps""", 1035, 1302, 330, 42)
val x657 = Vertex("""different maps should highlight conflicts / challenges, e.g. feature not being achievable with a tech architecture""", 1035, 1161, 330, 126)
val x658 = Vertex("""map views e.g""", 1035, 1107, 195, 21)
val x659 = Vertex("""technical architecture""", 1250, 1125, 330, 21)
val x660 = Vertex("""feature/benefits""", 1250, 1089, 240, 21)
val x661 = Vertex("""market map""", 1250, 1053, 150, 21)
val x662 = Vertex("""markitect and architecture future view must be aligned otherwise product will fail""", 1035, 954, 330, 84)
val x663 = Vertex("""creating results in the short run while working in the long run""", 700, 844, 330, 63)
val x664 = Vertex("""must not harm ability to support existing customers""", 1050, 876, 330, 63)
val x665 = Vertex("""don't just look at what customers want now - look at various information feeds to identify requirements in the future""", 1050, 735, 330, 126)
val x666 = Vertex("""early forces in solution development""", 700, 396, 330, 42)
val x667 = Vertex("""initial bug review""", 1050, 550, 270, 21)
val x668 = Vertex("""compare to requirement - e.g. use of must, should and may terminology""", 1340, 636, 330, 84)
val x669 = Vertex("""different cultures will classify differently""", 1340, 579, 330, 42)
val x670 = Vertex("""classify bugs""", 1340, 522, 195, 21)
val x671 = Vertex("""5 = product improvement/enhancement""", 1555, 522, 330, 42)
val x672 = Vertex("""1 = operational wont work - show stopper""", 1555, 465, 330, 42)
val x673 = Vertex("""implement with all stqkeholders so get a sense of who series what as priorities""", 1340, 366, 330, 84)
val x674 = Vertex("""target market""", 1050, 330, 195, 21)
val x675 = Vertex("""technology base""", 1050, 276, 225, 21)
val x676 = Vertex("""frameworks""", 1295, 294, 150, 21)
val x677 = Vertex("""integration""", 1295, 258, 165, 21)
val x678 = Vertex("""persistence""", 1295, 222, 165, 21)
val x679 = Vertex("""problem domain""", 1050, 139, 210, 21)
val x680 = Vertex("""customers""", 1280, 186, 135, 21)
val x681 = Vertex("""process and practise""", 1280, 150, 300, 21)
val x682 = Vertex("""legislation requirements""", 1280, 93, 330, 42)
val x683 = Vertex("""competition""", 1280, 57, 165, 21)
val x684 = Vertex("""who responsible for what""", 700, 0, 330, 42)
MindMap("""beyond software architecture""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x410, x411, x412, x413, x414, x415, x416, x417, x418, x419, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x430, x431, x432, x433, x434, x435, x436, x437, x438, x439, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x460, x461, x462, x463, x464, x465, x466, x467, x468, x469, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x490, x491, x492, x493, x494, x495, x496, x497, x498, x499, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x510, x511, x512, x513, x514, x515, x516, x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527, x528, x529, x530, x531, x532, x533, x534, x535, x536, x537, x538, x539, x540, x541, x542, x543, x544, x545, x546, x547, x548, x549, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559, x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, x570, x571, x572, x573, x574, x575, x576, x577, x578, x579, x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x590, x591, x592, x593, x594, x595, x596, x597, x598, x599, x600, x601, x602, x603, x604, x605, x606, x607, x608, x609, x610, x611, x612, x613, x614, x615, x616, x617, x618, x619, x620, x621, x622, x623, x624, x625, x626, x627, x628, x629, x630, x631, x632, x633, x634, x635, x636, x637, x638, x639, x640, x641, x642, x643, x644, x645, x646, x647, x648, x649, x650, x651, x652, x653, x654, x655, x656, x657, x658, x659, x660, x661, x662, x663, x664, x665, x666, x667, x668, x669, x670, x671, x672, x673, x674, x675, x676, x677, x678, x679, x680, x681, x682, x683, x684), List(Edge(x1, x2), Edge(x1, x71), Edge(x1, x183), Edge(x1, x229), Edge(x1, x268), Edge(x1, x335), Edge(x1, x435), Edge(x1, x481), Edge(x1, x610), Edge(x2, x3), Edge(x2, x4), Edge(x2, x14), Edge(x2, x18), Edge(x2, x19), Edge(x2, x20), Edge(x2, x36), Edge(x2, x55), Edge(x4, x5), Edge(x4, x6), Edge(x4, x9), Edge(x4, x12), Edge(x6, x7), Edge(x6, x8), Edge(x9, x10), Edge(x9, x11), Edge(x12, x13), Edge(x14, x15), Edge(x14, x16), Edge(x14, x17), Edge(x20, x21), Edge(x20, x22), Edge(x20, x24), Edge(x20, x25), Edge(x20, x27), Edge(x20, x30), Edge(x22, x23), Edge(x25, x26), Edge(x27, x28), Edge(x27, x29), Edge(x30, x31), Edge(x30, x32), Edge(x30, x33), Edge(x30, x34), Edge(x30, x35), Edge(x36, x37), Edge(x36, x41), Edge(x36, x46), Edge(x36, x49), Edge(x37, x38), Edge(x37, x39), Edge(x37, x40), Edge(x41, x42), Edge(x41, x43), Edge(x41, x44), Edge(x41, x45), Edge(x46, x47), Edge(x46, x48), Edge(x49, x50), Edge(x49, x51), Edge(x49, x52), Edge(x49, x53), Edge(x49, x54), Edge(x55, x56), Edge(x55, x59), Edge(x55, x63), Edge(x55, x67), Edge(x56, x57), Edge(x56, x58), Edge(x59, x60), Edge(x59, x61), Edge(x59, x62), Edge(x63, x64), Edge(x63, x65), Edge(x63, x66), Edge(x67, x68), Edge(x67, x69), Edge(x67, x70), Edge(x71, x72), Edge(x71, x78), Edge(x71, x108), Edge(x71, x131), Edge(x71, x166), Edge(x71, x167), Edge(x71, x173), Edge(x72, x73), Edge(x72, x74), Edge(x72, x75), Edge(x72, x77), Edge(x75, x76), Edge(x78, x79), Edge(x78, x80), Edge(x78, x89), Edge(x78, x99), Edge(x78, x104), Edge(x80, x81), Edge(x80, x82), Edge(x80, x83), Edge(x80, x86), Edge(x80, x87), Edge(x80, x88), Edge(x83, x84), Edge(x83, x85), Edge(x89, x90), Edge(x90, x91), Edge(x90, x92), Edge(x90, x93), Edge(x90, x94), Edge(x90, x97), Edge(x90, x98), Edge(x94, x95), Edge(x94, x96), Edge(x99, x100), Edge(x99, x101), Edge(x99, x102), Edge(x99, x103), Edge(x104, x105), Edge(x104, x106), Edge(x104, x107), Edge(x108, x109), Edge(x108, x113), Edge(x108, x114), Edge(x108, x115), Edge(x108, x118), Edge(x108, x125), Edge(x108, x129), Edge(x109, x110), Edge(x109, x111), Edge(x109, x112), Edge(x115, x116), Edge(x115, x117), Edge(x118, x119), Edge(x118, x120), Edge(x118, x121), Edge(x118, x122), Edge(x118, x123), Edge(x118, x124), Edge(x125, x126), Edge(x125, x127), Edge(x125, x128), Edge(x129, x130), Edge(x131, x132), Edge(x131, x153), Edge(x131, x165), Edge(x132, x133), Edge(x132, x134), Edge(x132, x135), Edge(x132, x139), Edge(x132, x144), Edge(x132, x149), Edge(x132, x150), Edge(x132, x151), Edge(x132, x152), Edge(x135, x136), Edge(x135, x137), Edge(x135, x138), Edge(x139, x140), Edge(x139, x141), Edge(x139, x142), Edge(x139, x143), Edge(x144, x145), Edge(x144, x146), Edge(x144, x147), Edge(x144, x148), Edge(x153, x154), Edge(x153, x157), Edge(x153, x158), Edge(x153, x161), Edge(x153, x162), Edge(x153, x163), Edge(x153, x164), Edge(x154, x155), Edge(x154, x156), Edge(x158, x159), Edge(x158, x160), Edge(x167, x168), Edge(x167, x169), Edge(x167, x170), Edge(x167, x171), Edge(x167, x172), Edge(x173, x174), Edge(x173, x175), Edge(x173, x176), Edge(x173, x177), Edge(x173, x178), Edge(x173, x179), Edge(x173, x180), Edge(x173, x181), Edge(x173, x182), Edge(x183, x184), Edge(x183, x185), Edge(x183, x207), Edge(x183, x219), Edge(x185, x186), Edge(x185, x195), Edge(x185, x197), Edge(x185, x198), Edge(x185, x201), Edge(x185, x202), Edge(x185, x203), Edge(x186, x187), Edge(x186, x188), Edge(x186, x194), Edge(x188, x189), Edge(x188, x190), Edge(x188, x191), Edge(x188, x192), Edge(x188, x193), Edge(x195, x196), Edge(x198, x199), Edge(x198, x200), Edge(x203, x204), Edge(x203, x205), Edge(x203, x206), Edge(x207, x208), Edge(x207, x213), Edge(x207, x218), Edge(x208, x209), Edge(x208, x210), Edge(x208, x211), Edge(x208, x212), Edge(x213, x214), Edge(x213, x215), Edge(x213, x216), Edge(x213, x217), Edge(x219, x220), Edge(x219, x224), Edge(x219, x227), Edge(x220, x221), Edge(x220, x222), Edge(x220, x223), Edge(x224, x225), Edge(x224, x226), Edge(x227, x228), Edge(x229, x230), Edge(x229, x241), Edge(x230, x231), Edge(x230, x232), Edge(x232, x233), Edge(x232, x234), Edge(x232, x235), Edge(x232, x236), Edge(x232, x237), Edge(x232, x238), Edge(x232, x239), Edge(x232, x240), Edge(x241, x242), Edge(x241, x243), Edge(x241, x246), Edge(x241, x247), Edge(x241, x255), Edge(x243, x244), Edge(x243, x245), Edge(x247, x248), Edge(x247, x249), Edge(x247, x250), Edge(x247, x251), Edge(x247, x252), Edge(x247, x253), Edge(x253, x254), Edge(x255, x256), Edge(x255, x257), Edge(x255, x258), Edge(x255, x259), Edge(x255, x260), Edge(x255, x263), Edge(x255, x264), Edge(x255, x265), Edge(x260, x261), Edge(x260, x262), Edge(x265, x266), Edge(x265, x267), Edge(x268, x269), Edge(x268, x270), Edge(x268, x271), Edge(x268, x272), Edge(x268, x274), Edge(x268, x279), Edge(x268, x280), Edge(x268, x313), Edge(x272, x273), Edge(x274, x275), Edge(x274, x276), Edge(x274, x277), Edge(x274, x278), Edge(x280, x281), Edge(x280, x284), Edge(x280, x287), Edge(x280, x289), Edge(x280, x292), Edge(x280, x295), Edge(x280, x298), Edge(x280, x300), Edge(x280, x303), Edge(x280, x307), Edge(x280, x309), Edge(x281, x282), Edge(x281, x283), Edge(x284, x285), Edge(x284, x286), Edge(x287, x288), Edge(x289, x290), Edge(x289, x291), Edge(x292, x293), Edge(x292, x294), Edge(x295, x296), Edge(x295, x297), Edge(x298, x299), Edge(x300, x301), Edge(x300, x302), Edge(x303, x304), Edge(x303, x305), Edge(x303, x306), Edge(x307, x308), Edge(x309, x310), Edge(x309, x311), Edge(x309, x312), Edge(x313, x314), Edge(x313, x315), Edge(x313, x334), Edge(x315, x316), Edge(x315, x317), Edge(x315, x318), Edge(x315, x319), Edge(x315, x320), Edge(x315, x321), Edge(x315, x324), Edge(x315, x328), Edge(x315, x329), Edge(x315, x330), Edge(x315, x331), Edge(x315, x332), Edge(x315, x333), Edge(x321, x322), Edge(x321, x323), Edge(x324, x325), Edge(x324, x326), Edge(x324, x327), Edge(x335, x336), Edge(x335, x343), Edge(x335, x369), Edge(x335, x380), Edge(x335, x384), Edge(x336, x337), Edge(x336, x338), Edge(x336, x339), Edge(x336, x340), Edge(x336, x341), Edge(x336, x342), Edge(x343, x344), Edge(x343, x347), Edge(x343, x353), Edge(x343, x356), Edge(x343, x360), Edge(x344, x345), Edge(x344, x346), Edge(x347, x348), Edge(x347, x349), Edge(x347, x350), Edge(x347, x351), Edge(x347, x352), Edge(x353, x354), Edge(x353, x355), Edge(x356, x357), Edge(x356, x358), Edge(x356, x359), Edge(x360, x361), Edge(x360, x362), Edge(x360, x365), Edge(x360, x368), Edge(x362, x363), Edge(x362, x364), Edge(x365, x366), Edge(x365, x367), Edge(x369, x370), Edge(x369, x372), Edge(x369, x376), Edge(x370, x371), Edge(x372, x373), Edge(x372, x374), Edge(x372, x375), Edge(x376, x377), Edge(x376, x378), Edge(x376, x379), Edge(x380, x381), Edge(x380, x382), Edge(x380, x383), Edge(x384, x385), Edge(x384, x386), Edge(x384, x388), Edge(x384, x401), Edge(x384, x409), Edge(x384, x416), Edge(x384, x432), Edge(x386, x387), Edge(x388, x389), Edge(x388, x390), Edge(x388, x399), Edge(x388, x400), Edge(x390, x391), Edge(x390, x392), Edge(x390, x393), Edge(x390, x394), Edge(x390, x395), Edge(x390, x396), Edge(x390, x397), Edge(x390, x398), Edge(x401, x402), Edge(x401, x403), Edge(x401, x408), Edge(x403, x404), Edge(x403, x405), Edge(x403, x406), Edge(x403, x407), Edge(x409, x410), Edge(x409, x411), Edge(x409, x412), Edge(x409, x413), Edge(x409, x414), Edge(x409, x415), Edge(x416, x417), Edge(x416, x430), Edge(x416, x431), Edge(x417, x418), Edge(x417, x419), Edge(x417, x420), Edge(x417, x421), Edge(x417, x422), Edge(x417, x423), Edge(x417, x424), Edge(x417, x425), Edge(x417, x426), Edge(x417, x427), Edge(x417, x428), Edge(x417, x429), Edge(x432, x433), Edge(x432, x434), Edge(x435, x436), Edge(x435, x440), Edge(x435, x444), Edge(x435, x456), Edge(x435, x467), Edge(x435, x468), Edge(x435, x471), Edge(x435, x473), Edge(x436, x437), Edge(x436, x438), Edge(x436, x439), Edge(x440, x441), Edge(x440, x442), Edge(x440, x443), Edge(x444, x445), Edge(x444, x448), Edge(x444, x451), Edge(x444, x452), Edge(x444, x453), Edge(x444, x454), Edge(x444, x455), Edge(x445, x446), Edge(x445, x447), Edge(x448, x449), Edge(x448, x450), Edge(x456, x457), Edge(x456, x458), Edge(x456, x459), Edge(x456, x463), Edge(x459, x460), Edge(x459, x461), Edge(x459, x462), Edge(x463, x464), Edge(x463, x465), Edge(x463, x466), Edge(x468, x469), Edge(x468, x470), Edge(x471, x472), Edge(x473, x474), Edge(x473, x475), Edge(x473, x476), Edge(x473, x477), Edge(x473, x478), Edge(x473, x479), Edge(x473, x480), Edge(x481, x482), Edge(x481, x487), Edge(x481, x491), Edge(x481, x507), Edge(x481, x533), Edge(x481, x536), Edge(x482, x483), Edge(x482, x484), Edge(x482, x485), Edge(x482, x486), Edge(x487, x488), Edge(x487, x489), Edge(x487, x490), Edge(x491, x492), Edge(x491, x493), Edge(x491, x499), Edge(x491, x503), Edge(x493, x494), Edge(x493, x495), Edge(x493, x496), Edge(x493, x497), Edge(x493, x498), Edge(x499, x500), Edge(x499, x501), Edge(x499, x502), Edge(x503, x504), Edge(x503, x505), Edge(x503, x506), Edge(x507, x508), Edge(x507, x514), Edge(x507, x515), Edge(x507, x516), Edge(x507, x517), Edge(x507, x518), Edge(x507, x519), Edge(x507, x524), Edge(x507, x531), Edge(x508, x509), Edge(x508, x510), Edge(x508, x511), Edge(x508, x512), Edge(x508, x513), Edge(x519, x520), Edge(x519, x521), Edge(x519, x522), Edge(x519, x523), Edge(x524, x525), Edge(x524, x526), Edge(x524, x527), Edge(x524, x528), Edge(x524, x529), Edge(x524, x530), Edge(x531, x532), Edge(x533, x534), Edge(x533, x535), Edge(x536, x537), Edge(x536, x539), Edge(x536, x540), Edge(x536, x541), Edge(x536, x547), Edge(x536, x550), Edge(x536, x564), Edge(x536, x580), Edge(x537, x538), Edge(x541, x542), Edge(x541, x543), Edge(x541, x544), Edge(x541, x545), Edge(x541, x546), Edge(x547, x548), Edge(x547, x549), Edge(x550, x551), Edge(x550, x556), Edge(x550, x559), Edge(x550, x563), Edge(x551, x552), Edge(x551, x553), Edge(x551, x554), Edge(x551, x555), Edge(x556, x557), Edge(x556, x558), Edge(x559, x560), Edge(x559, x561), Edge(x559, x562), Edge(x564, x565), Edge(x564, x573), Edge(x564, x578), Edge(x564, x579), Edge(x565, x566), Edge(x565, x567), Edge(x565, x568), Edge(x565, x569), Edge(x565, x570), Edge(x565, x571), Edge(x565, x572), Edge(x573, x574), Edge(x573, x575), Edge(x573, x576), Edge(x573, x577), Edge(x580, x581), Edge(x580, x583), Edge(x580, x586), Edge(x580, x590), Edge(x580, x594), Edge(x580, x599), Edge(x580, x605), Edge(x581, x582), Edge(x583, x584), Edge(x583, x585), Edge(x586, x587), Edge(x586, x588), Edge(x586, x589), Edge(x590, x591), Edge(x590, x592), Edge(x590, x593), Edge(x594, x595), Edge(x594, x596), Edge(x594, x597), Edge(x594, x598), Edge(x599, x600), Edge(x599, x601), Edge(x599, x602), Edge(x599, x603), Edge(x599, x604), Edge(x605, x606), Edge(x605, x607), Edge(x605, x608), Edge(x605, x609), Edge(x610, x611), Edge(x610, x616), Edge(x610, x621), Edge(x610, x628), Edge(x610, x632), Edge(x610, x636), Edge(x610, x655), Edge(x610, x663), Edge(x610, x666), Edge(x610, x684), Edge(x611, x612), Edge(x611, x613), Edge(x611, x614), Edge(x611, x615), Edge(x616, x617), Edge(x616, x618), Edge(x616, x619), Edge(x616, x620), Edge(x621, x622), Edge(x621, x623), Edge(x621, x624), Edge(x621, x625), Edge(x621, x626), Edge(x621, x627), Edge(x628, x629), Edge(x628, x630), Edge(x628, x631), Edge(x632, x633), Edge(x632, x634), Edge(x632, x635), Edge(x636, x637), Edge(x636, x643), Edge(x636, x651), Edge(x637, x638), Edge(x637, x639), Edge(x637, x640), Edge(x637, x641), Edge(x637, x642), Edge(x643, x644), Edge(x643, x645), Edge(x643, x646), Edge(x643, x647), Edge(x643, x649), Edge(x643, x650), Edge(x647, x648), Edge(x651, x652), Edge(x651, x653), Edge(x651, x654), Edge(x655, x656), Edge(x655, x657), Edge(x655, x658), Edge(x655, x662), Edge(x658, x659), Edge(x658, x660), Edge(x658, x661), Edge(x663, x664), Edge(x663, x665), Edge(x666, x667), Edge(x666, x674), Edge(x666, x675), Edge(x666, x679), Edge(x667, x668), Edge(x667, x669), Edge(x667, x670), Edge(x667, x673), Edge(x670, x671), Edge(x670, x672), Edge(x675, x676), Edge(x675, x677), Edge(x675, x678), Edge(x679, x680), Edge(x679, x681), Edge(x679, x682), Edge(x679, x683)))
}
, {
val x1 = Vertex("""Headaches""", 0, 4203, 135, 21)
val x2 = Vertex("""is it accute or chronic?""", 155, 7577, 330, 42)
val x3 = Vertex("""very chronic""", 505, 8370, 180, 21)
val x4 = Vertex("""Blood stasis""", 705, 8352, 180, 21)
val x5 = Vertex("""chronic""", 505, 8284, 105, 21)
val x6 = Vertex("""what makes it worce or better?""", 630, 8284, 330, 42)
val x7 = Vertex("""worse at night""", 980, 8316, 210, 21)
val x8 = Vertex("""blood or yin xu""", 1210, 8307, 225, 21)
val x9 = Vertex("""liver yang rising""", 1455, 8289, 255, 21)
val x10 = Vertex("""worse in the day time""", 980, 8253, 315, 21)
val x11 = Vertex("""dampness""", 1315, 8253, 120, 21)
val x12 = Vertex("""qi or yang xu""", 1315, 8217, 195, 21)
val x13 = Vertex("""accute""", 505, 7482, 90, 21)
val x14 = Vertex("""maybe a fever? with runny nose? aversion to cold, shivers""", 615, 7482, 330, 63)
val x15 = Vertex("""no""", 965, 8181, 30, 21)
val x16 = Vertex("""yes""", 965, 7464, 45, 21)
val x17 = Vertex("""invasion of external wind""", 1030, 7464, 330, 42)
val x18 = Vertex(""" feeling of heaviness, the head feels muzzy, as if it were wrapped in a cloth, the pain is  aggravated by a damp weather, poor concentration and heavy eyes, a sensation of oppression in the chest,a feeling of heaviness in the whole body, a runny nose with a white discharge, a sticky tongue coating and a pulse that is floating and slippery""", 1380, 7830, 330, 336)
val x19 = Vertex("""wind damp""", 1730, 7830, 135, 21)
val x20 = Vertex("""Cang Zhu""", 1885, 7904, 120, 21)
val x21 = Vertex("""Hou Xiang""", 1885, 7868, 135, 21)
val x22 = Vertex("""Bai Zhi""", 1885, 7832, 105, 21)
val x23 = Vertex("""with diarrhea""", 1885, 7796, 195, 21)
val x24 = Vertex("""Hou Xiang Zheng Qi San""", 2100, 7778, 330, 21)
val x25 = Vertex("""Qiang Hou Sheng Shi San""", 1885, 7721, 330, 42)
val x26 = Vertex(""" stiff achey shoulders, no thirst, maybe breathlessness, cough, sneezing a runny nose with white discharge or a blocked nose, pale urine and a floating tight pulse.""", 1380, 7512, 330, 168)
val x27 = Vertex("""wind cold""", 1730, 7512, 135, 21)
val x28 = Vertex("""what is the main area of pain?""", 1885, 7541, 330, 42)
val x29 = Vertex("""Frontal""", 2235, 7667, 105, 21)
val x30 = Vertex("""Bai Zhi""", 2360, 7685, 105, 21)
val x31 = Vertex("""Ge gen """, 2360, 7649, 105, 21)
val x32 = Vertex("""Sheng ma""", 2360, 7613, 120, 21)
val x33 = Vertex("""Temporal""", 2235, 7559, 120, 21)
val x34 = Vertex("""Qing Hao""", 2375, 7577, 120, 21)
val x35 = Vertex("""Huang Qin""", 2375, 7541, 135, 21)
val x36 = Vertex("""Chai Hu""", 2375, 7505, 105, 21)
val x37 = Vertex("""Occipital """, 2235, 7433, 150, 21)
val x38 = Vertex("""Gao Ben""", 2405, 7469, 105, 21)
val x39 = Vertex("""Chuan Xiong""", 2405, 7433, 165, 21)
val x40 = Vertex("""Qiang Huo""", 2405, 7397, 135, 21)
val x41 = Vertex("""Du Huo""", 2405, 7361, 90, 21)
val x42 = Vertex("""Chuan Xiong Cha Tiao San""", 1885, 7304, 330, 42)
val x43 = Vertex("""this headache is felt with inside the head with a distending character,very severe feeling as if it has being cracked, slight thirst, runny nose with a yellow discharge, sore throat, possibly swollen tonsils, red eyes slightly darkened urine, the tongue has slightly red sides or the tip of the tongue is colored red slightly and pulses floating and rapid""", 1380, 6932, 330, 357)
val x44 = Vertex("""wind heat""", 1730, 6932, 135, 21)
val x45 = Vertex("""red eyes with pain around the eyes?""", 1885, 7060, 330, 42)
val x46 = Vertex("""Ju hua""", 2235, 7042, 90, 21)
val x47 = Vertex("""Bo He""", 1885, 7006, 75, 21)
val x48 = Vertex("""Ge Gen""", 1885, 6970, 90, 21)
val x49 = Vertex("""Man Jing Zi""", 1885, 6934, 165, 21)
val x50 = Vertex("""with wind cold symptoms""", 1885, 6877, 330, 42)
val x51 = Vertex("""ju hua cha tiao san""", 2235, 6859, 285, 21)
val x52 = Vertex("""severe wind heat symptoms""", 1885, 6802, 330, 42)
val x53 = Vertex("""yin qiao jie du san""", 2235, 6784, 285, 21)
val x54 = Vertex("""Sang ju yin""", 1885, 6748, 165, 21)
val x55 = Vertex("""What makes it worse or better?""", 155, 5358, 330, 42)
val x56 = Vertex("""pressure like massage""", 505, 6694, 315, 21)
val x57 = Vertex("""worse""", 840, 6712, 75, 21)
val x58 = Vertex("""excess""", 935, 6694, 90, 21)
val x59 = Vertex("""better""", 840, 6658, 90, 21)
val x60 = Vertex("""xu""", 950, 6640, 30, 21)
val x61 = Vertex("""worse with menses""", 505, 6550, 255, 21)
val x62 = Vertex("""after""", 780, 6604, 75, 21)
val x63 = Vertex("""blood xu""", 875, 6586, 120, 21)
val x64 = Vertex("""during """, 780, 6550, 105, 21)
val x65 = Vertex("""blood stag""", 905, 6550, 150, 21)
val x66 = Vertex("""liver fire """, 905, 6514, 165, 21)
val x67 = Vertex("""before""", 780, 6478, 90, 21)
val x68 = Vertex("""liver yang""", 890, 6460, 150, 21)
val x69 = Vertex("""lying down""", 505, 6406, 150, 21)
val x70 = Vertex("""better""", 675, 6424, 90, 21)
val x71 = Vertex("""xu""", 785, 6406, 30, 21)
val x72 = Vertex("""worse""", 675, 6370, 75, 21)
val x73 = Vertex("""excess""", 770, 6352, 90, 21)
val x74 = Vertex("""after eating""", 505, 6253, 180, 21)
val x75 = Vertex("""better""", 705, 6316, 90, 21)
val x76 = Vertex("""qi or blood xu""", 815, 6298, 210, 21)
val x77 = Vertex("""worse""", 705, 6226, 75, 21)
val x78 = Vertex("""stomach heat""", 800, 6262, 180, 21)
val x79 = Vertex("""food retention""", 800, 6226, 210, 21)
val x80 = Vertex("""phlegm""", 800, 6190, 90, 21)
val x81 = Vertex("""dampness""", 800, 6154, 120, 21)
val x82 = Vertex("""with sexual activity""", 505, 6100, 300, 21)
val x83 = Vertex("""better""", 825, 6118, 90, 21)
val x84 = Vertex("""liver fire""", 935, 6100, 150, 21)
val x85 = Vertex("""worse""", 825, 6064, 75, 21)
val x86 = Vertex("""kidney xu""", 920, 6046, 135, 21)
val x87 = Vertex(""" when patient relaxes""", 505, 5992, 315, 21)
val x88 = Vertex("""better""", 840, 6010, 90, 21)
val x89 = Vertex("""liver qi stagnation""", 950, 5992, 285, 21)
val x90 = Vertex("""worse""", 840, 5956, 75, 21)
val x91 = Vertex("""liver yang""", 935, 5938, 150, 21)
val x92 = Vertex("""worse with anger or sudden excitement or with the consumption of sour foods""", 505, 5226, 330, 84)
val x93 = Vertex("""with thrist, a bitter taste, scanty urine, constipation with dry stools, red eyes and a red tongue with yellow coating, intense pain that is fixed in one place often accompanied by nausea or vomiting.""", 855, 5713, 330, 210)
val x94 = Vertex("""liver fire""", 1205, 5713, 150, 21)
val x95 = Vertex("""Jue Ming Zi""", 1375, 5749, 165, 21)
val x96 = Vertex("""Xia Ku Cao""", 1375, 5713, 150, 21)
val x97 = Vertex("""Long Dan Cao""", 1375, 5677, 180, 21)
val x98 = Vertex("""Long Gan Xie Gan San""", 1375, 5641, 300, 21)
val x99 = Vertex("""with a pale and thin tongue""", 855, 5584, 330, 42)
val x100 = Vertex("""liver yang rising from liver blood xu""", 1205, 5565, 330, 42)
val x101 = Vertex("""+ Si Wu San +""", 1555, 5547, 195, 21)
val x102 = Vertex("""with diarrhea""", 855, 5511, 195, 21)
val x103 = Vertex("""liver yang with liver qi invading the spleen""", 1070, 5483, 330, 42)
val x104 = Vertex("""with nause and vomiting""", 855, 5426, 330, 42)
val x105 = Vertex("""liver yang with liver qi invading stomach""", 1205, 5398, 330, 42)
val x106 = Vertex("""with red tongue with no coat""", 855, 5285, 330, 42)
val x107 = Vertex("""liver yang with kidney yin xu""", 1205, 5285, 330, 42)
val x108 = Vertex("""Add Zuo Gui San""", 1555, 5362, 225, 21)
val x109 = Vertex("""add Liu Wei Di Huang San""", 1555, 5305, 330, 42)
val x110 = Vertex("""patient pregnant?""", 1555, 5239, 255, 21)
val x111 = Vertex("""yes""", 1830, 5266, 45, 21)
val x112 = Vertex("""Zhen Gan Xi Fang San with replace Dai zhe shi  with zhen zhu mu""", 1895, 5227, 330, 63)
val x113 = Vertex("""no""", 1830, 5191, 30, 21)
val x114 = Vertex("""Zhen Gan Xi Fang San""", 1880, 5173, 300, 21)
val x115 = Vertex("""with a pale and swollen  tongue with the pulse felling deep and slow""", 855, 5074, 330, 84)
val x116 = Vertex("""liver yang rising with kidney yang xu""", 1205, 5046, 330, 42)
val x117 = Vertex("""and dry eyes""", 855, 5010, 180, 21)
val x118 = Vertex("""liver yin xu""", 1055, 5001, 180, 21)
val x119 = Vertex("""add Yi Guan Jian""", 1255, 4983, 240, 21)
val x120 = Vertex("""effect either or both sides of the head along the gb channel or on the temples or eybrows, sometimes dizziness, tinnitus, deafness, a dry throat, insomnia, irritability, a red tongue-body an d a wirey pulse.""", 855, 4749, 330, 210)
val x121 = Vertex("""liver yang""", 1205, 4749, 150, 21)
val x122 = Vertex("""Suan Zao Ren""", 1375, 4947, 180, 21)
val x123 = Vertex("""Mu lI""", 1375, 4911, 75, 21)
val x124 = Vertex("""Long Gu""", 1375, 4875, 105, 21)
val x125 = Vertex("""Gan Cao""", 1375, 4839, 105, 21)
val x126 = Vertex("""Bai Shao""", 1375, 4803, 120, 21)
val x127 = Vertex("""Ling Ynag Jiao""", 1375, 4767, 210, 21)
val x128 = Vertex("""Shi Jue Ming""", 1375, 4731, 180, 21)
val x129 = Vertex("""Ju Hua""", 1375, 4695, 90, 21)
val x130 = Vertex("""Bai ji Li""", 1375, 4659, 135, 21)
val x131 = Vertex("""Gou Teng""", 1375, 4623, 120, 21)
val x132 = Vertex("""Tian Ma""", 1375, 4587, 105, 21)
val x133 = Vertex("""Ling jiao gou teng San""", 1375, 4551, 330, 21)
val x134 = Vertex("""Tian ma Gou Teng yin""", 1375, 4515, 300, 21)
val x135 = Vertex("""worse with damp weather""", 505, 4458, 330, 42)
val x136 = Vertex("""phlegm""", 855, 4458, 90, 21)
val x137 = Vertex("""dampness""", 855, 4422, 120, 21)
val x138 = Vertex("""in the cold""", 505, 4368, 165, 21)
val x139 = Vertex("""better""", 690, 4386, 90, 21)
val x140 = Vertex("""liver yang """, 800, 4368, 165, 21)
val x141 = Vertex("""worse""", 690, 4332, 75, 21)
val x142 = Vertex("""yang xu""", 785, 4314, 105, 21)
val x143 = Vertex("""worse in the heat""", 505, 4278, 255, 21)
val x144 = Vertex("""liver fire rising""", 780, 4278, 255, 21)
val x145 = Vertex("""liver yang """, 780, 4242, 165, 21)
val x146 = Vertex("""with rest and lying down""", 505, 4179, 330, 42)
val x147 = Vertex("""better""", 855, 4206, 90, 21)
val x148 = Vertex("""qi and or blood xu""", 965, 4188, 270, 21)
val x149 = Vertex("""worse""", 855, 4152, 75, 21)
val x150 = Vertex("""damp""", 950, 4152, 60, 21)
val x151 = Vertex("""phlegm""", 950, 4116, 90, 21)
val x152 = Vertex("""better with light activity""", 505, 4059, 330, 42)
val x153 = Vertex("""phlegm""", 855, 4059, 90, 21)
val x154 = Vertex("""liver yang rising """, 855, 4023, 270, 21)
val x155 = Vertex("""worse with activity""", 505, 3987, 285, 21)
val x156 = Vertex("""qi and or blood xu""", 810, 3969, 270, 21)
val x157 = Vertex("""what is the pain like?""", 155, 3257, 330, 21)
val x158 = Vertex("""severe""", 505, 3876, 90, 21)
val x159 = Vertex("""distending located all over the head""", 615, 3912, 330, 42)
val x160 = Vertex("""wind heat""", 965, 3894, 135, 21)
val x161 = Vertex("""With muscle stiffness?""", 615, 3838, 330, 21)
val x162 = Vertex("""stiff shoulders and neck""", 965, 3837, 330, 42)
val x163 = Vertex("""liver yang rising""", 1315, 3819, 255, 21)
val x164 = Vertex("""stiff occiput""", 965, 3783, 195, 21)
val x165 = Vertex("""hollow feeling""", 505, 3747, 210, 21)
val x166 = Vertex("""kidney xu""", 735, 3729, 135, 21)
val x167 = Vertex("""Stabbing, boring, a splitting headache""", 505, 3609, 330, 42)
val x168 = Vertex("""very chonic, or history of trauma, in a fixed location""", 855, 3609, 330, 63)
val x169 = Vertex("""often includeing: a dark complexion, rib or abdominal pain, in women painful periods with dark clotted blood, a purple tongue the pulse is firm wirey choppy, or a purple spot on the tongue""", 1205, 3525, 330, 189)
val x170 = Vertex("""blood stasis""", 1205, 3489, 180, 21)
val x171 = Vertex("""Pulling""", 505, 3394, 105, 21)
val x172 = Vertex("""with severe dizziness and lightheadedness""", 630, 3394, 330, 42)
val x173 = Vertex("""possibly a slight shaking of the head, numbness or tremor of a limb""", 980, 3390, 330, 84)
val x174 = Vertex("""liver wind""", 1330, 3390, 150, 21)
val x175 = Vertex("""Qiang Xie""", 1500, 3444, 135, 21)
val x176 = Vertex("""Di long""", 1500, 3408, 105, 21)
val x177 = Vertex("""Bai Ji li""", 1500, 3372, 135, 21)
val x178 = Vertex("""Zhen Gan Xi Feng San""", 1500, 3336, 300, 21)
val x179 = Vertex("""Tian ma Gou Teng Yin""", 1500, 3300, 300, 21)
val x180 = Vertex("""Distending (throbbing bursting, pulsating""", 505, 3229, 330, 42)
val x181 = Vertex("""effects one or both sides only?""", 855, 3243, 330, 42)
val x182 = Vertex("""Liver yang or Liver fire""", 1205, 3215, 330, 42)
val x183 = Vertex("""effects the whole of the head?""", 855, 3158, 330, 42)
val x184 = Vertex("""Dull""", 505, 3122, 60, 21)
val x185 = Vertex("""a xu headache in general""", 585, 3094, 330, 42)
val x186 = Vertex("""heavey feeling as if the head were wrapped, muzzinesss""", 505, 2819, 330, 63)
val x187 = Vertex("""difficulty thinking, worce in the mornings, persistant catarrh, somtimes sinisitis, nausea, lack of appitite, feeling of fullness on the chest or epigastrium, a thick sticky tongue coating and a slippery pulse""", 855, 2819, 330, 210)
val x188 = Vertex("""with out dizzyness or blurred vision""", 1205, 3029, 330, 42)
val x189 = Vertex("""dampness""", 1555, 3029, 120, 21)
val x190 = Vertex("""Si Jun Zi San""", 1695, 3058, 195, 21)
val x191 = Vertex("""Yin Chen Wu Ling San""", 1695, 3022, 300, 21)
val x192 = Vertex("""Qiang Huo Sheng Shi San""", 1695, 2965, 330, 42)
val x193 = Vertex("""with dizzyness and or blurred vision?""", 1205, 2755, 330, 42)
val x194 = Vertex("""phlegm""", 1555, 2755, 90, 21)
val x195 = Vertex("""with internal wind stirring""", 1665, 2893, 330, 42)
val x196 = Vertex("""Ban Xia Bai Zhu Tian Ma San""", 2015, 2893, 330, 42)
val x197 = Vertex("""Di Long""", 2365, 2929, 105, 21)
val x198 = Vertex("""Tian Ma Gou Teng Yin""", 2365, 2893, 300, 21)
val x199 = Vertex("""Jiang Can""", 2365, 2857, 135, 21)
val x200 = Vertex("""Quan Xie""", 2365, 2821, 120, 21)
val x201 = Vertex("""very chronic ha""", 1665, 2785, 225, 21)
val x202 = Vertex("""Jiang Can""", 1910, 2767, 135, 21)
val x203 = Vertex("""cold phlegm?""", 1665, 2731, 180, 21)
val x204 = Vertex("""Bai Fu Zi""", 1865, 2713, 135, 21)
val x205 = Vertex("""headache moves from one side to another?""", 1665, 2656, 330, 42)
val x206 = Vertex("""Dan Nan Xing""", 2015, 2638, 180, 21)
val x207 = Vertex("""Quan Xie""", 1665, 2602, 120, 21)
val x208 = Vertex("""Ban Xia Bai Zhu Tian Ma San""", 1665, 2545, 330, 42)
val x209 = Vertex("""Where does it hurt?""", 155, 1272, 285, 21)
val x210 = Vertex("""location changes all the time""", 460, 2480, 330, 42)
val x211 = Vertex("""with a heavy sensaion""", 810, 2509, 315, 21)
val x212 = Vertex("""Phlegm""", 1145, 2491, 90, 21)
val x213 = Vertex("""with a pulling sensation""", 810, 2434, 330, 42)
val x214 = Vertex("""liver wind""", 1160, 2416, 150, 21)
val x215 = Vertex("""Occipital""", 460, 2285, 135, 21)
val x216 = Vertex("""occuring accutely""", 615, 2312, 255, 21)
val x217 = Vertex("""with sharp pain""", 890, 2380, 225, 21)
val x218 = Vertex("""damp heat in the bladder""", 1135, 2352, 330, 42)
val x219 = Vertex("""with stiffness of  the back of the neck""", 890, 2280, 330, 42)
val x220 = Vertex("""invasion of wind cold""", 1240, 2280, 315, 21)
val x221 = Vertex("""chuan xiong""", 1575, 2316, 165, 21)
val x222 = Vertex("""qiang hou""", 1575, 2280, 135, 21)
val x223 = Vertex("""du hou""", 1575, 2244, 90, 21)
val x224 = Vertex("""gao ben""", 1575, 2208, 105, 21)
val x225 = Vertex("""occors chronically""", 615, 2172, 270, 21)
val x226 = Vertex("""kidney xu""", 905, 2154, 135, 21)
val x227 = Vertex("""top of the head""", 460, 1907, 225, 21)
val x228 = Vertex("""with and intense pain and posibly a feeling of cold , vomiting, cold limbs and a wirey pulse""", 705, 2034, 330, 105)
val x229 = Vertex("""Stagnation of Cold in the Liver Channel""", 1055, 2034, 330, 42)
val x230 = Vertex("""Gui Zhi""", 1405, 2099, 105, 21)
val x231 = Vertex("""Dang Gui""", 1405, 2063, 120, 21)
val x232 = Vertex("""Chuang Xiong""", 1405, 2027, 180, 21)
val x233 = Vertex("""Chen Xiang Jiang Qi san""", 1405, 1970, 330, 42)
val x234 = Vertex("""Wu Zhu Yu Tang""", 1405, 1934, 210, 21)
val x235 = Vertex("""but starts at the base""", 705, 1898, 330, 21)
val x236 = Vertex("""due to ub channel""", 1055, 1880, 255, 21)
val x237 = Vertex("""qi and blood xi""", 705, 1844, 225, 21)
val x238 = Vertex("""wu zhu yu""", 950, 1826, 135, 21)
val x239 = Vertex("""heart blood xu""", 705, 1790, 210, 21)
val x240 = Vertex("""sharp pain""", 705, 1754, 150, 21)
val x241 = Vertex("""liver yang rising""", 875, 1736, 255, 21)
val x242 = Vertex("""dull headach that improves with lieing down""", 705, 1679, 330, 42)
val x243 = Vertex("""liver blood xu""", 1055, 1661, 210, 21)
val x244 = Vertex("""sides of the head""", 460, 1607, 255, 21)
val x245 = Vertex("""sharp and throbbing""", 735, 1607, 285, 21)
val x246 = Vertex("""liver yang""", 1040, 1625, 150, 21)
val x247 = Vertex("""liver fire""", 1040, 1589, 150, 21)
val x248 = Vertex("""liver wind""", 1040, 1553, 150, 21)
val x249 = Vertex("""Behind the eyes (often with migraine)""", 460, 1496, 330, 42)
val x250 = Vertex("""sharp pain""", 810, 1514, 150, 21)
val x251 = Vertex("""liver yang rising""", 980, 1496, 255, 21)
val x252 = Vertex("""dull pain""", 810, 1460, 135, 21)
val x253 = Vertex("""liver blood xu""", 965, 1442, 210, 21)
val x254 = Vertex("""whole head""", 460, 1368, 150, 21)
val x255 = Vertex("""occuring accutly""", 630, 1399, 240, 21)
val x256 = Vertex("""sharp pain, pulling pain""", 890, 1385, 330, 42)
val x257 = Vertex("""invasion of external wind""", 1240, 1357, 330, 42)
val x258 = Vertex("""occurs chronicly""", 630, 1321, 240, 21)
val x259 = Vertex("""with a dull pain""", 890, 1312, 240, 21)
val x260 = Vertex("""Kidney essence xu""", 1150, 1294, 255, 21)
val x261 = Vertex("""One side only""", 460, 1186, 195, 21)
val x262 = Vertex("""right side""", 675, 1258, 150, 21)
val x263 = Vertex("""shi ?""", 845, 1240, 75, 21)
val x264 = Vertex("""left side""", 675, 1204, 135, 21)
val x265 = Vertex("""xu ?""", 830, 1186, 60, 21)
val x266 = Vertex("""liver fire""", 675, 1150, 150, 21)
val x267 = Vertex("""liver yang""", 675, 1114, 150, 21)
val x268 = Vertex("""gallblader channel""", 675, 1078, 270, 21)
val x269 = Vertex("""forhead (relates to the stomache)""", 460, 633, 330, 42)
val x270 = Vertex("""ge gen """, 810, 1042, 105, 21)
val x271 = Vertex("""bai zhi""", 810, 1006, 105, 21)
val x272 = Vertex("""what is the pain like?""", 810, 752, 330, 21)
val x273 = Vertex("""intense""", 1160, 862, 105, 21)
val x274 = Vertex("""worse with eating""", 1285, 862, 255, 21)
val x275 = Vertex("""Fullness feeling on the epigastrium, sour regurgitation, bealching, foul breath, a thick sticky tongue coating and a slippery pulse""", 1560, 862, 330, 126)
val x276 = Vertex("""retention of food""", 1910, 862, 255, 21)
val x277 = Vertex("""Bo He""", 2185, 970, 75, 21)
val x278 = Vertex("""Fang Feng""", 2185, 934, 135, 21)
val x279 = Vertex("""Zi Su Ye""", 2185, 898, 120, 21)
val x280 = Vertex("""Cang Zhu""", 2185, 862, 120, 21)
val x281 = Vertex("""Hou Xiang""", 2185, 826, 135, 21)
val x282 = Vertex("""Da Huang""", 2185, 790, 120, 21)
val x283 = Vertex("""Xiang Sha Zhi Zhu Wan""", 2185, 754, 315, 21)
val x284 = Vertex("""Bao He wan""", 2185, 718, 150, 21)
val x285 = Vertex("""heavy with lack of concentraion""", 1160, 661, 330, 42)
val x286 = Vertex("""and with dizzyness and/or blurred vision""", 1510, 660, 330, 42)
val x287 = Vertex("""phlegm""", 1860, 642, 90, 21)
val x288 = Vertex("""dampness""", 1510, 606, 120, 21)
val x289 = Vertex("""sharp""", 1160, 570, 75, 21)
val x290 = Vertex("""stomach heat""", 1255, 552, 180, 21)
val x291 = Vertex("""dull""", 1160, 516, 60, 21)
val x292 = Vertex("""stomach xu""", 1240, 498, 150, 21)
val x293 = Vertex("""moves around""", 810, 343, 180, 21)
val x294 = Vertex("""worse with anxiety and stress, hypochondrial pain or distention, poor digestion, belching, flatulence, abdominal distention,small bitty stools, sighing and a Wirey pulse""", 1010, 315, 330, 168)
val x295 = Vertex("""liver qi stagnation""", 1360, 315, 285, 21)
val x296 = Vertex("""Chen Xiang""", 1665, 405, 150, 21)
val x297 = Vertex("""Yan Hu Suo""", 1665, 369, 150, 21)
val x298 = Vertex("""Zhi Shi""", 1665, 333, 105, 21)
val x299 = Vertex("""Sang Ye""", 1665, 297, 105, 21)
val x300 = Vertex("""Ju Hua""", 1665, 261, 90, 21)
val x301 = Vertex("""Mu Xiang""", 1665, 225, 120, 21)
val x302 = Vertex("""Xiao Yao San""", 1665, 189, 180, 21)
val x303 = Vertex("""temples""", 460, 94, 105, 21)
val x304 = Vertex("""moves around""", 585, 153, 180, 21)
val x305 = Vertex("""liver fire""", 585, 117, 150, 21)
val x306 = Vertex("""huang qin""", 755, 99, 135, 21)
val x307 = Vertex("""liver wind""", 585, 63, 150, 21)
val x308 = Vertex("""qing hao""", 755, 54, 120, 21)
val x309 = Vertex("""Chai hu""", 895, 36, 105, 21)
val x310 = Vertex("""liver yang""", 585, 0, 150, 21)
MindMap("""Headaches""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x310), List(Edge(x1, x2), Edge(x1, x55), Edge(x1, x157), Edge(x1, x209), Edge(x2, x3), Edge(x2, x5), Edge(x2, x13), Edge(x3, x4), Edge(x5, x6), Edge(x6, x7), Edge(x6, x10), Edge(x7, x8), Edge(x8, x9), Edge(x10, x11), Edge(x10, x12), Edge(x13, x14), Edge(x14, x15), Edge(x14, x16), Edge(x16, x17), Edge(x17, x18), Edge(x17, x26), Edge(x17, x43), Edge(x18, x19), Edge(x19, x20), Edge(x19, x21), Edge(x19, x22), Edge(x19, x23), Edge(x19, x25), Edge(x23, x24), Edge(x26, x27), Edge(x27, x28), Edge(x27, x42), Edge(x28, x29), Edge(x28, x33), Edge(x28, x37), Edge(x29, x30), Edge(x29, x31), Edge(x29, x32), Edge(x33, x34), Edge(x33, x35), Edge(x33, x36), Edge(x37, x38), Edge(x37, x39), Edge(x37, x40), Edge(x37, x41), Edge(x43, x44), Edge(x44, x45), Edge(x44, x47), Edge(x44, x48), Edge(x44, x49), Edge(x44, x50), Edge(x44, x52), Edge(x44, x54), Edge(x45, x46), Edge(x50, x51), Edge(x52, x53), Edge(x55, x56), Edge(x55, x61), Edge(x55, x69), Edge(x55, x74), Edge(x55, x82), Edge(x55, x87), Edge(x55, x92), Edge(x55, x135), Edge(x55, x138), Edge(x55, x143), Edge(x55, x146), Edge(x55, x152), Edge(x55, x155), Edge(x56, x57), Edge(x56, x59), Edge(x57, x58), Edge(x59, x60), Edge(x61, x62), Edge(x61, x64), Edge(x61, x67), Edge(x62, x63), Edge(x64, x65), Edge(x64, x66), Edge(x67, x68), Edge(x69, x70), Edge(x69, x72), Edge(x70, x71), Edge(x72, x73), Edge(x74, x75), Edge(x74, x77), Edge(x75, x76), Edge(x77, x78), Edge(x77, x79), Edge(x77, x80), Edge(x77, x81), Edge(x82, x83), Edge(x82, x85), Edge(x83, x84), Edge(x85, x86), Edge(x87, x88), Edge(x87, x90), Edge(x88, x89), Edge(x90, x91), Edge(x92, x93), Edge(x92, x99), Edge(x92, x102), Edge(x92, x104), Edge(x92, x106), Edge(x92, x115), Edge(x92, x117), Edge(x92, x120), Edge(x93, x94), Edge(x94, x95), Edge(x94, x96), Edge(x94, x97), Edge(x94, x98), Edge(x99, x100), Edge(x100, x101), Edge(x102, x103), Edge(x104, x105), Edge(x106, x107), Edge(x107, x108), Edge(x107, x109), Edge(x107, x110), Edge(x110, x111), Edge(x110, x113), Edge(x111, x112), Edge(x113, x114), Edge(x115, x116), Edge(x117, x118), Edge(x118, x119), Edge(x120, x121), Edge(x121, x122), Edge(x121, x123), Edge(x121, x124), Edge(x121, x125), Edge(x121, x126), Edge(x121, x127), Edge(x121, x128), Edge(x121, x129), Edge(x121, x130), Edge(x121, x131), Edge(x121, x132), Edge(x121, x133), Edge(x121, x134), Edge(x135, x136), Edge(x135, x137), Edge(x138, x139), Edge(x138, x141), Edge(x139, x140), Edge(x141, x142), Edge(x143, x144), Edge(x143, x145), Edge(x146, x147), Edge(x146, x149), Edge(x147, x148), Edge(x149, x150), Edge(x149, x151), Edge(x152, x153), Edge(x152, x154), Edge(x155, x156), Edge(x157, x158), Edge(x157, x165), Edge(x157, x167), Edge(x157, x171), Edge(x157, x180), Edge(x157, x184), Edge(x157, x186), Edge(x158, x159), Edge(x158, x161), Edge(x159, x160), Edge(x161, x162), Edge(x161, x164), Edge(x162, x163), Edge(x165, x166), Edge(x167, x168), Edge(x168, x169), Edge(x168, x170), Edge(x171, x172), Edge(x172, x173), Edge(x173, x174), Edge(x174, x175), Edge(x174, x176), Edge(x174, x177), Edge(x174, x178), Edge(x174, x179), Edge(x180, x181), Edge(x180, x183), Edge(x181, x182), Edge(x184, x185), Edge(x186, x187), Edge(x187, x188), Edge(x187, x193), Edge(x188, x189), Edge(x189, x190), Edge(x189, x191), Edge(x189, x192), Edge(x193, x194), Edge(x194, x195), Edge(x194, x201), Edge(x194, x203), Edge(x194, x205), Edge(x194, x207), Edge(x194, x208), Edge(x195, x196), Edge(x196, x197), Edge(x196, x198), Edge(x196, x199), Edge(x196, x200), Edge(x201, x202), Edge(x203, x204), Edge(x205, x206), Edge(x209, x210), Edge(x209, x215), Edge(x209, x227), Edge(x209, x244), Edge(x209, x249), Edge(x209, x254), Edge(x209, x261), Edge(x209, x269), Edge(x209, x303), Edge(x210, x211), Edge(x210, x213), Edge(x211, x212), Edge(x213, x214), Edge(x215, x216), Edge(x215, x225), Edge(x216, x217), Edge(x216, x219), Edge(x217, x218), Edge(x219, x220), Edge(x220, x221), Edge(x220, x222), Edge(x220, x223), Edge(x220, x224), Edge(x225, x226), Edge(x227, x228), Edge(x227, x235), Edge(x227, x237), Edge(x227, x239), Edge(x227, x240), Edge(x227, x242), Edge(x228, x229), Edge(x229, x230), Edge(x229, x231), Edge(x229, x232), Edge(x229, x233), Edge(x229, x234), Edge(x235, x236), Edge(x237, x238), Edge(x240, x241), Edge(x242, x243), Edge(x244, x245), Edge(x245, x246), Edge(x245, x247), Edge(x245, x248), Edge(x249, x250), Edge(x249, x252), Edge(x250, x251), Edge(x252, x253), Edge(x254, x255), Edge(x254, x258), Edge(x255, x256), Edge(x256, x257), Edge(x258, x259), Edge(x259, x260), Edge(x261, x262), Edge(x261, x264), Edge(x261, x266), Edge(x261, x267), Edge(x261, x268), Edge(x262, x263), Edge(x264, x265), Edge(x269, x270), Edge(x269, x271), Edge(x269, x272), Edge(x269, x293), Edge(x272, x273), Edge(x272, x285), Edge(x272, x289), Edge(x272, x291), Edge(x273, x274), Edge(x274, x275), Edge(x275, x276), Edge(x276, x277), Edge(x276, x278), Edge(x276, x279), Edge(x276, x280), Edge(x276, x281), Edge(x276, x282), Edge(x276, x283), Edge(x276, x284), Edge(x285, x286), Edge(x285, x288), Edge(x286, x287), Edge(x289, x290), Edge(x291, x292), Edge(x293, x294), Edge(x294, x295), Edge(x295, x296), Edge(x295, x297), Edge(x295, x298), Edge(x295, x299), Edge(x295, x300), Edge(x295, x301), Edge(x295, x302), Edge(x303, x304), Edge(x303, x305), Edge(x303, x307), Edge(x303, x310), Edge(x305, x306), Edge(x307, x308), Edge(x308, x309)))
}
, {
val x1 = Vertex("""THE MYTHICAL MAN-MONTH""", 0, 840, 330, 21)
val x2 = Vertex("""MYTHICAL MAN-MONTH AFTER 20 YEARS""", 350, 1624, 330, 42)
val x3 = Vertex("""PROPOSITIONS OF THE MYTHICAL MAN-MONTH: TRUE OR FALSE?""", 350, 1546, 330, 63)
val x4 = Vertex("""Summary""", 700, 1544, 105, 21)
val x5 = Vertex("""Of""", 825, 1540, 30, 21)
val x6 = Vertex("""Mythical Man-Month""", 875, 1531, 270, 21)
val x7 = Vertex("""Main Points""", 1165, 1513, 165, 21)
val x8 = Vertex("""NO SILVER BULLET REFIRED""", 350, 1456, 330, 42)
val x9 = Vertex("""Reactions""", 700, 1452, 135, 21)
val x10 = Vertex("""To""", 855, 1443, 30, 21)
val x11 = Vertex("""No Silver Bullet""", 905, 1425, 240, 21)
val x12 = Vertex("""NO SILVER BULLET - ESSENCE AND ACCIDENT""", 350, 1368, 330, 42)
val x13 = Vertex("""OTHER FACE""", 350, 1332, 150, 21)
val x14 = Vertex("""HATCHING A CATASTROPHE""", 350, 1296, 330, 21)
val x15 = Vertex("""WHOLE AND PARTS""", 350, 1260, 225, 21)
val x16 = Vertex("""SHARP TOOLS""", 350, 1224, 165, 21)
val x17 = Vertex("""PLAN TO THROW ONE AWAY""", 350, 1188, 330, 21)
val x18 = Vertex("""DOCUMENTARY HYPOTHESIS""", 350, 1152, 330, 21)
val x19 = Vertex("""TEN POUNDS IN A FIVE POUND SACK""", 350, 1095, 330, 42)
val x20 = Vertex("""CALLING THE SHOT""", 350, 826, 240, 21)
val x21 = Vertex("""Time Estimation""", 610, 826, 225, 21)
val x22 = Vertex("""Productivity""", 855, 978, 180, 21)
val x23 = Vertex("""Increased""", 1055, 1059, 135, 21)
val x24 = Vertex("""Using""", 1210, 1050, 75, 21)
val x25 = Vertex("""High-level Language""", 1305, 1032, 285, 21)
val x26 = Vertex("""Varies With""", 1055, 947, 165, 21)
val x27 = Vertex("""Complexity""", 1240, 947, 150, 21)
val x28 = Vertex("""Operating System""", 1410, 996, 240, 21)
val x29 = Vertex("""3 Times""", 1670, 992, 105, 21)
val x30 = Vertex("""Worse Than""", 1795, 983, 150, 21)
val x31 = Vertex("""Compiler""", 1965, 965, 120, 21)
val x32 = Vertex("""Compiler""", 1410, 929, 120, 21)
val x33 = Vertex("""3 Times""", 1550, 925, 105, 21)
val x34 = Vertex("""Worse Than""", 1675, 916, 150, 21)
val x35 = Vertex("""Application""", 1845, 898, 165, 21)
val x36 = Vertex("""Task""", 1410, 862, 60, 21)
val x37 = Vertex("""Effort""", 855, 826, 90, 21)
val x38 = Vertex("""Required""", 965, 825, 120, 21)
val x39 = Vertex("""Varies With""", 1105, 823, 165, 21)
val x40 = Vertex("""Number of Instructions""", 1290, 819, 330, 21)
val x41 = Vertex("""Raised To""", 1640, 810, 135, 21)
val x42 = Vertex("""1.5""", 1795, 792, 45, 21)
val x43 = Vertex("""Downtime""", 855, 675, 120, 21)
val x44 = Vertex("""EG""", 995, 702, 30, 21)
val x45 = Vertex("""Leave""", 1045, 756, 75, 21)
val x46 = Vertex("""Sickness""", 1045, 720, 120, 21)
val x47 = Vertex("""Unrelated Work""", 1045, 684, 210, 21)
val x48 = Vertex("""Paperwork""", 1045, 648, 135, 21)
val x49 = Vertex("""Meetings""", 1045, 612, 120, 21)
val x50 = Vertex("""50%""", 995, 576, 45, 21)
val x51 = Vertex("""Total""", 1060, 558, 75, 21)
val x52 = Vertex("""WHY DID TOWER OF BABEL FAIL?""", 350, 501, 330, 42)
val x53 = Vertex("""PASSING THE WORD""", 350, 465, 240, 21)
val x54 = Vertex("""SECOND SYSTEM EFFECT""", 350, 429, 300, 21)
val x55 = Vertex("""ARISTOCRACY, DEMOCRACY, SYSTEM DESIGN""", 350, 372, 330, 42)
val x56 = Vertex("""SURGICAL TEAM""", 350, 336, 195, 21)
val x57 = Vertex("""MYTHICAL MAN-MONTH""", 350, 300, 270, 21)
val x58 = Vertex("""TAR PIT""", 350, 264, 105, 21)
val x59 = Vertex("""SOURCE""", 350, 132, 90, 21)
val x60 = Vertex("""ISBN 0-201-83595-9""", 460, 228, 270, 21)
val x61 = Vertex("""1995""", 460, 192, 60, 21)
val x62 = Vertex("""Addison-Wesley""", 460, 156, 210, 21)
val x63 = Vertex("""Frederick P. Brooks, Jr""", 460, 99, 330, 42)
val x64 = Vertex("""The Mythical Man-Month: 
Essays on Software Engineering 
Anniversary Edition""", 460, 0, 330, 84)
MindMap("""THE MYTHICAL MAN-MONTH""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64), List(Edge(x1, x2), Edge(x1, x3), Edge(x1, x8), Edge(x1, x12), Edge(x1, x13), Edge(x1, x14), Edge(x1, x15), Edge(x1, x16), Edge(x1, x17), Edge(x1, x18), Edge(x1, x19), Edge(x1, x20), Edge(x1, x52), Edge(x1, x53), Edge(x1, x54), Edge(x1, x55), Edge(x1, x56), Edge(x1, x57), Edge(x1, x58), Edge(x1, x59), Edge(x3, x4), Edge(x4, x5), Edge(x5, x6), Edge(x6, x7), Edge(x8, x9), Edge(x9, x10), Edge(x10, x11), Edge(x20, x21), Edge(x21, x22), Edge(x21, x37), Edge(x21, x43), Edge(x22, x23), Edge(x22, x26), Edge(x23, x24), Edge(x24, x25), Edge(x26, x27), Edge(x27, x28), Edge(x27, x32), Edge(x27, x36), Edge(x28, x29), Edge(x29, x30), Edge(x30, x31), Edge(x32, x33), Edge(x33, x34), Edge(x34, x35), Edge(x37, x38), Edge(x38, x39), Edge(x39, x40), Edge(x40, x41), Edge(x41, x42), Edge(x43, x44), Edge(x43, x50), Edge(x44, x45), Edge(x44, x46), Edge(x44, x47), Edge(x44, x48), Edge(x44, x49), Edge(x50, x51), Edge(x59, x60), Edge(x59, x61), Edge(x59, x62), Edge(x59, x63), Edge(x59, x64)))
}
, {
val x1 = Vertex("""Software design patterns""", 0, 4279, 330, 42)
val x2 = Vertex("""Unlike components, does not provide reuse""", 350, 8502, 330, 42)
val x3 = Vertex("""resources""", 350, 8349, 135, 21)
val x4 = Vertex("""Design Class Diagrams""", 505, 8466, 315, 21)
val x5 = Vertex("""Design Patterns (exciton)""", 505, 8409, 330, 42)
val x6 = Vertex("""Design Patterns http://home.earthlink.net/~huston2/dp/patterns.html""", 505, 8310, 330, 84)
val x7 = Vertex("""go4expert.com > Forums > Showthread ? ...""", 505, 8253, 330, 42)
val x8 = Vertex("""http://en.wikipedia.org/wiki/Pattern_theory""", 505, 8196, 330, 42)
val x9 = Vertex("""tools""", 350, 8100, 75, 21)
val x10 = Vertex("""eclipse plug-ins""", 445, 8118, 240, 21)
val x11 = Vertex("""Design Pattern Toolkit""", 705, 8157, 330, 21)
val x12 = Vertex("""create patterns and generates applications from patterns""", 1055, 8118, 330, 63)
val x13 = Vertex("""pattern box""", 705, 8079, 165, 21)
val x14 = Vertex("""includes 16 design patterns of the Gang of Four (GoF).""", 890, 8040, 330, 63)
val x15 = Vertex("""argouml""", 445, 8004, 105, 21)
val x16 = Vertex("""Anti Patern""", 350, 7497, 165, 21)
val x17 = Vertex("""Over Use Of Patterns""", 535, 7789, 300, 21)
val x18 = Vertex("""The resulting code tends to be full of factories that only ever return a single thing, that thing being a proxy to a delegate that wraps a class that has a method that has the three lines of code you actually want to execute.""", 855, 7758, 330, 231)
val x19 = Vertex("""Developers, having seen the light regarding the usefulness of patterns, try to use them wherever they can, regardless of whether the pattern is appropriate.""", 855, 7575, 330, 168)
val x20 = Vertex("""Design For The Sake Of Design""", 535, 7518, 330, 42)
val x21 = Vertex("""Organizational """, 535, 7381, 225, 21)
val x22 = Vertex("""If It Is Working Dont Change""", 780, 7461, 330, 42)
val x23 = Vertex("""Give Me Estimates Now""", 780, 7371, 315, 21)
val x24 = Vertex("""estimate how much time and extra info is need to produce the desired estimate""", 1115, 7362, 330, 84)
val x25 = Vertex("""boss doesn't buy it. Lower accuracy is suggested instead. Funny thing is however inaccurate the estimate is said to be, it turns into a deadline.""", 1465, 7281, 330, 147)
val x26 = Vertex("""Untested But Finished""", 780, 7245, 315, 21)
val x27 = Vertex("""Spaghettiness""", 535, 7174, 195, 21)
val x28 = Vertex("""spaghetti code often is all code that is not our own because it was generated by minds that think differently than us.""", 750, 7104, 330, 126)
val x29 = Vertex("""Catalog""", 535, 7068, 105, 21)
val x30 = Vertex("""a pattern that tells how to go from a problem to a bad solution.""", 535, 6990, 330, 63)
val x31 = Vertex("""history""", 350, 6954, 105, 21)
val x32 = Vertex("""Design Patterns (GOF)""", 475, 6936, 315, 21)
val x33 = Vertex("""clasification on usage""", 350, 3468, 330, 21)
val x34 = Vertex("""Concurrency patterns""", 700, 6549, 300, 21)
val x35 = Vertex("""Leaders/followers pattern""", 1020, 6879, 330, 42)
val x36 = Vertex("""Guarded suspension""", 1020, 6843, 270, 21)
val x37 = Vertex("""Balking pattern""", 1020, 6807, 225, 21)
val x38 = Vertex("""IllegalStateException""", 1265, 6789, 315, 21)
val x39 = Vertex("""Active Object""", 1020, 6753, 195, 21)
val x40 = Vertex("""Reactor pattern""", 1020, 6717, 225, 21)
val x41 = Vertex("""Monitor (synchronization)""", 1020, 6660, 330, 42)
val x42 = Vertex("""Hoare vs. Mesa semantics""", 1370, 6660, 330, 42)
val x43 = Vertex("""lock.acquire(); lock.release();""", 1370, 6603, 330, 42)
val x44 = Vertex("""Thread-local storage""", 1020, 6564, 300, 21)
val x45 = Vertex("""ThreadLocal<Integer> local = new ThreadLocal<Integer>();""", 1340, 6525, 330, 63)
val x46 = Vertex("""Read/write lock pattern""", 1020, 6468, 330, 42)
val x47 = Vertex("""Double-checked locking""", 1020, 6333, 330, 21)
val x48 = Vertex("""It will work for 32-bit primitive values""", 1370, 6411, 330, 42)
val x49 = Vertex("""Just define the singleton as a static field in a separate class.""", 1370, 6333, 330, 63)
val x50 = Vertex("""The "Double-Checked Locking is Broken" Declaration""", 1370, 6255, 330, 63)
val x51 = Vertex("""will work with volatile in >= j2se5.0""", 1370, 6198, 330, 42)
val x52 = Vertex("""Thread pool pattern""", 1020, 6162, 285, 21)
val x53 = Vertex("""Behavioral Patterns""", 700, 4434, 285, 21)
val x54 = Vertex("""Mediator""", 1005, 6021, 120, 21)
val x55 = Vertex("""Analogy:  airport control tower""", 1145, 6105, 330, 42)
val x56 = Vertex("""Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.""", 1145, 5880, 330, 210)
val x57 = Vertex("""Template Method""", 1005, 5739, 225, 21)
val x58 = Vertex("""constant algorithm, replaceable steps""", 1250, 5823, 330, 42)
val x59 = Vertex("""Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.""", 1250, 5598, 330, 210)
val x60 = Vertex("""Visitor""", 1005, 5379, 105, 21)
val x61 = Vertex("""The Visitor Design Pattern""", 1130, 5541, 330, 42)
val x62 = Vertex("""ability to add new operations to existing object structures without modifying those structures""", 1130, 5421, 330, 105)
val x63 = Vertex("""decouple operations on an aggregate object""", 1130, 5364, 330, 42)
val x64 = Vertex("""Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.""", 1130, 5160, 330, 189)
val x65 = Vertex("""Interpreter""", 1005, 5050, 165, 21)
val x66 = Vertex("""Analogy: musician reading music""", 1190, 5103, 330, 42)
val x67 = Vertex("""Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.""", 1190, 4941, 330, 147)
val x68 = Vertex("""Iterator""", 1005, 4813, 120, 21)
val x69 = Vertex("""decouple traversal of an aggregate object""", 1145, 4884, 330, 42)
val x70 = Vertex("""Analogy: secr accessing her file system""", 1145, 4827, 330, 42)
val x71 = Vertex("""Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.""", 1145, 4686, 330, 126)
val x72 = Vertex("""Memento""", 1005, 4566, 105, 21)
val x73 = Vertex("""checkpoint/rollback an object's internal state""", 1130, 4608, 330, 63)
val x74 = Vertex("""Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.""", 1130, 4446, 330, 147)
val x75 = Vertex("""State""", 1005, 4308, 75, 21)
val x76 = Vertex("""State is more dynamic than strategy""", 1100, 4389, 330, 42)
val x77 = Vertex("""object's behavior morphs as its state changes""", 1100, 4311, 330, 63)
val x78 = Vertex("""Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.""", 1100, 4170, 330, 126)
val x79 = Vertex("""Observer""", 1005, 4042, 120, 21)
val x80 = Vertex("""Listener""", 1145, 4134, 120, 21)
val x81 = Vertex("""Analogy: news subsscription""", 1145, 4077, 330, 42)
val x82 = Vertex("""Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.""", 1145, 3915, 330, 147)
val x83 = Vertex("""Strategy""", 1005, 3706, 120, 21)
val x84 = Vertex("""Example - Routing Strategies: Static, Dinamic""", 1145, 3837, 330, 63)
val x85 = Vertex("""uses composition instead of inheritance.""", 1145, 3780, 330, 42)
val x86 = Vertex("""plug-compatible algorithms; 
algorithms can be selected on-the-fly at runtime;""", 1145, 3681, 330, 84)
val x87 = Vertex("""Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.""", 1145, 3498, 330, 168)
val x88 = Vertex("""Command""", 1005, 3253, 105, 21)
val x89 = Vertex("""Parallel Processing""", 1130, 3462, 285, 21)
val x90 = Vertex("""thread pool class works with an internal queue of tasks waiting to be done. Tasks are Command objects.""", 1130, 3342, 330, 105)
val x91 = Vertex("""uml""", 1130, 3306, 45, 21)
val x92 = Vertex("""encapsulate a request as an object""", 1130, 3249, 330, 42)
val x93 = Vertex("""Analogy: meal order at a restaurant""", 1130, 3192, 330, 42)
val x94 = Vertex("""Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.""", 1130, 3009, 330, 168)
val x95 = Vertex("""Chain of Responsibility""", 1005, 2857, 330, 42)
val x96 = Vertex("""single processing pipe, many possible handlers""", 1355, 2931, 330, 63)
val x97 = Vertex("""Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.""", 1355, 2706, 330, 210)
val x98 = Vertex("""Structural Patterns""", 700, 1963, 285, 21)
val x99 = Vertex("""Proxy """, 1005, 2656, 90, 21)
val x100 = Vertex("""Provide a surrogate or placeholder for another object to control access to it.""", 1115, 2607, 330, 84)
val x101 = Vertex("""Flyweight """, 1005, 2479, 150, 21)
val x102 = Vertex("""use hashmap (week) to cache, override equals, hashcode""", 1175, 2529, 330, 63)
val x103 = Vertex("""use sharing to optimize lots of "little" objects""", 1175, 2451, 330, 63)
val x104 = Vertex("""Use sharing to support large numbers of fine-grained objects efficiently.""", 1175, 2352, 330, 84)
val x105 = Vertex("""Facade """, 1005, 2242, 105, 21)
val x106 = Vertex("""simple front-end to a complicated subsystem""", 1130, 2295, 330, 42)
val x107 = Vertex("""Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.""", 1130, 2133, 330, 147)
val x108 = Vertex("""Decorator """, 1005, 2013, 150, 21)
val x109 = Vertex("""scrollbar is the "decoration" to the webpage""", 1175, 2076, 330, 42)
val x110 = Vertex("""Composite     Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. """, 1175, 1893, 330, 168)
val x111 = Vertex("""Composite""", 1005, 1755, 135, 21)
val x112 = Vertex("""Example: javax.management.CompositeData""", 1160, 1836, 330, 42)
val x113 = Vertex("""recursive composition""", 1160, 1800, 315, 21)
val x114 = Vertex("""Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.""", 1160, 1617, 330, 168)
val x115 = Vertex("""Bridge""", 1005, 1539, 90, 21)
val x116 = Vertex("""decouple interface and implementation""", 1115, 1560, 330, 42)
val x117 = Vertex("""Decouple an abstraction from its implementation so that the two can vary independently.""", 1115, 1461, 330, 84)
val x118 = Vertex("""Adapter""", 1005, 1341, 105, 21)
val x119 = Vertex("""wrap a legacy component""", 1130, 1404, 330, 42)
val x120 = Vertex("""Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.""", 1130, 1221, 330, 168)
val x121 = Vertex("""Creational Patterns""", 700, 610, 285, 21)
val x122 = Vertex("""Singleton""", 1005, 1095, 135, 21)
val x123 = Vertex("""Initialization on demand holder idiom""", 1160, 1164, 330, 42)
val x124 = Vertex("""class initialization phase is guaranteed by the JLS to be serial""", 1510, 1125, 330, 63)
val x125 = Vertex("""public static Singleton getInstance()""", 1160, 1068, 330, 42)
val x126 = Vertex("""Ensure a class only has one instance, and provide a global point of access to it.""", 1160, 969, 330, 84)
val x127 = Vertex("""Prototype""", 1005, 880, 135, 21)
val x128 = Vertex("""clone()""", 1160, 933, 105, 21)
val x129 = Vertex("""Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.""", 1160, 792, 330, 126)
val x130 = Vertex("""Factory Method""", 1005, 576, 210, 21)
val x131 = Vertex("""limitations: extensibility -> inheritance""", 1235, 735, 330, 42)
val x132 = Vertex("""Example: javax.xml.parsers.DocumentBuilderFactory""", 1235, 657, 330, 63)
val x133 = Vertex("""Descriptive names- avoid overloading""", 1235, 600, 330, 42)
val x134 = Vertex("""virtual creation through inheritance""", 1235, 543, 330, 42)
val x135 = Vertex("""Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.""", 1235, 360, 330, 168)
val x136 = Vertex("""Builder""", 1005, 250, 105, 21)
val x137 = Vertex("""creation of an aggregate's elements""", 1130, 303, 330, 42)
val x138 = Vertex("""Separate the construction of a complex object from its representation so that the same construction process can create different representations.""", 1130, 141, 330, 147)
val x139 = Vertex("""Abstract Factory""", 1005, 70, 240, 21)
val x140 = Vertex("""Provide an interface for creating families of related or dependent objects without specifying their concrete classes.""", 1265, 0, 330, 126)
MindMap("""Software design patterns""", List(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140), List(Edge(x1, x2), Edge(x1, x3), Edge(x1, x9), Edge(x1, x16), Edge(x1, x31), Edge(x1, x33), Edge(x3, x4), Edge(x3, x5), Edge(x3, x6), Edge(x3, x7), Edge(x3, x8), Edge(x9, x10), Edge(x9, x15), Edge(x10, x11), Edge(x10, x13), Edge(x11, x12), Edge(x13, x14), Edge(x16, x17), Edge(x16, x20), Edge(x16, x21), Edge(x16, x27), Edge(x16, x29), Edge(x16, x30), Edge(x17, x18), Edge(x17, x19), Edge(x21, x22), Edge(x21, x23), Edge(x21, x26), Edge(x23, x24), Edge(x24, x25), Edge(x27, x28), Edge(x31, x32), Edge(x33, x34), Edge(x33, x53), Edge(x33, x98), Edge(x33, x121), Edge(x34, x35), Edge(x34, x36), Edge(x34, x37), Edge(x34, x39), Edge(x34, x40), Edge(x34, x41), Edge(x34, x44), Edge(x34, x46), Edge(x34, x47), Edge(x34, x52), Edge(x37, x38), Edge(x41, x42), Edge(x41, x43), Edge(x44, x45), Edge(x47, x48), Edge(x47, x49), Edge(x47, x50), Edge(x47, x51), Edge(x53, x54), Edge(x53, x57), Edge(x53, x60), Edge(x53, x65), Edge(x53, x68), Edge(x53, x72), Edge(x53, x75), Edge(x53, x79), Edge(x53, x83), Edge(x53, x88), Edge(x53, x95), Edge(x54, x55), Edge(x54, x56), Edge(x57, x58), Edge(x57, x59), Edge(x60, x61), Edge(x60, x62), Edge(x60, x63), Edge(x60, x64), Edge(x65, x66), Edge(x65, x67), Edge(x68, x69), Edge(x68, x70), Edge(x68, x71), Edge(x72, x73), Edge(x72, x74), Edge(x75, x76), Edge(x75, x77), Edge(x75, x78), Edge(x79, x80), Edge(x79, x81), Edge(x79, x82), Edge(x83, x84), Edge(x83, x85), Edge(x83, x86), Edge(x83, x87), Edge(x88, x89), Edge(x88, x90), Edge(x88, x91), Edge(x88, x92), Edge(x88, x93), Edge(x88, x94), Edge(x95, x96), Edge(x95, x97), Edge(x98, x99), Edge(x98, x101), Edge(x98, x105), Edge(x98, x108), Edge(x98, x111), Edge(x98, x115), Edge(x98, x118), Edge(x99, x100), Edge(x101, x102), Edge(x101, x103), Edge(x101, x104), Edge(x105, x106), Edge(x105, x107), Edge(x108, x109), Edge(x108, x110), Edge(x111, x112), Edge(x111, x113), Edge(x111, x114), Edge(x115, x116), Edge(x115, x117), Edge(x118, x119), Edge(x118, x120), Edge(x121, x122), Edge(x121, x127), Edge(x121, x130), Edge(x121, x136), Edge(x121, x139), Edge(x122, x123), Edge(x122, x125), Edge(x122, x126), Edge(x123, x124), Edge(x127, x128), Edge(x127, x129), Edge(x130, x131), Edge(x130, x132), Edge(x130, x133), Edge(x130, x134), Edge(x130, x135), Edge(x136, x137), Edge(x136, x138), Edge(x139, x140)))
}
)
}
